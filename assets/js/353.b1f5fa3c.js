(window.webpackJsonp=window.webpackJsonp||[]).push([[353],{757:function(s,e,n){"use strict";n.r(e);var a=n(46),t=Object(a.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"simple-summary"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#simple-summary"}},[s._v("#")]),s._v(" Simple Summary")]),s._v(" "),n("p",[s._v("This standard defines a ERC-721 token called assembly token which can represent a combination of assets.")]),s._v(" "),n("h2",{attrs:{id:"abstract"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[s._v("#")]),s._v(" Abstract")]),s._v(" "),n("p",[s._v("The ERC-1155 multi-token contract defines a way to batch transfer tokens, but those tokens must be minted by the ERC-1155 contract itself. This EIP is an ERC-721 extension with ability to assemble assets such as ether, ERC-20 tokens, ERC-721 tokens and ERC-1155 tokens into one ERC-721 token whose token id is also the asset's signature. As assets get assembled into one, batch transfer or swap can be implemented very easily.")]),s._v(" "),n("h2",{attrs:{id:"motivation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[s._v("#")]),s._v(" Motivation")]),s._v(" "),n("p",[s._v("As NFT arts and collectors rapidly increases, some collectors are not satisfied with traditional trading methods. When two collectors want to swap some of their collections, currently they can list their NFTs on the market and notify the other party to buy, but this is inefficient and gas-intensive. Instead, some collectors turn to social media or chat group looking for a trustworthy third party to swap NFTs for them. The third party takes NFTs from both collector A and B, and transfer A's collections to B and B's to A. This is very risky.")]),s._v(" "),n("p",[s._v('The safest way to do batch swap, is to transform batch swap into atomic swap, i.e. one to one swap. But first we should "assemble" those ether, ERC-20 tokens, ERC-721 tokens and ERC-1155 tokens together, and this is the main purpose of this EIP.')]),s._v(" "),n("h2",{attrs:{id:"specification"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[s._v("#")]),s._v(" Specification")]),s._v(" "),n("p",[s._v("The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119.")]),s._v(" "),n("p",[s._v("ERC-721 compliant contracts MAY implement this ERC to provide a standard method to assemble assets.")]),s._v(" "),n("p",[n("code",[s._v("mint")]),s._v(" and "),n("code",[s._v("safeMint")]),s._v(" assemble assets into one ERC-721 token. "),n("code",[s._v("mint")]),s._v(" SHOULD be implemented for normal ERC-20 tokens whose "),n("code",[s._v("_transfer")]),s._v(" is lossless. "),n("code",[s._v("safeMint")]),s._v(" MUST takes care for lossy token such as PIG token whose "),n("code",[s._v("_transfer")]),s._v(" function is taxed.")]),s._v(" "),n("p",[n("code",[s._v("_salt")]),s._v(" of "),n("code",[s._v("hash")]),s._v(" function MAY be implemented other way, even provided as user input. But the token id MUST be generated by "),n("code",[s._v("hash")]),s._v(" function.")]),s._v(" "),n("p",[s._v("Implementations of the standard MAY supports different set of assets.")]),s._v(" "),n("p",[s._v("Implementers of this standard MUST have all of the following functions:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("pragma solidity ^0.8.0;\n\ninterface AssemblyNFTInterface {\n\n  event AssemblyAsset(address indexed firstHolder,\n                    uint256 indexed tokenId,\n                    uint256 salt,\n                    address[] addresses,\n                    uint256[] numbers);\n\n  /**\n  * @dev hash function assigns the combination of assets with salt to bytes32 signature that is also the token id.\n  * @param `_salt` prevents hash collision, can be chosen by user input or increasing nonce from contract.\n  * @param `_addresses` concat assets addresses, e.g. [ERC-20_address1, ERC-20_address2, ERC-721_address_1, ERC-1155_address_1, ERC-1155_address_2]\n  * @param `_numbers` describes how many eth, ERC-20 token addresses length, ERC-721 token addresses length, ERC-1155 token addresses length,\n  * ERC-20 token amounts, ERC-721 token ids, ERC-1155 token ids and amounts.\n  */\n  function hash(uint256 _salt, address[] memory _addresses, uint256[] memory _numbers) external pure returns (uint256 tokenId);\n\n  /// @dev to assemble lossless assets\n  /// @param `_to` the receiver of the assembly token\n  function mint(address _to, address[] memory _addresses, uint256[] memory _numbers) payable external returns(uint256 tokenId);\n\n  /// @dev mint with additional logic that calculates the actual received value for tokens.\n  function safeMint(address _to, address[] memory _addresses, uint256[] memory _numbers) payable external returns(uint256 tokenId);\n\n  /// @dev burn this token and releases assembled assets\n  /// @param `_to` to which address the assets is released\n  function burn(address _to, uint256 _tokenId, uint256 _salt, address[] calldata _addresses, uint256[] calldata _numbers) external;\n\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br")])]),n("h2",{attrs:{id:"rationale"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#rationale"}},[s._v("#")]),s._v(" Rationale")]),s._v(" "),n("p",[s._v("There are many reasons why people want to pack their NFTs together. For example, a collector want to pack a set of football players into a football team; a collector has hundreds of of NFTs with no categories to manage them; a collector wants to buy a full collection of NFTs or none of them. They all need a way a assemble those NFTs together.")]),s._v(" "),n("p",[s._v("The reason for choosing ERC-721 standard as a wrapper is ERC-721 token is already widely used and well supported by NFT wallets. And assembly token itself can also be assembled again. Assembly token is easier for smart contract to use than a batch of assets, in scenarios like batch trade, batch swap or collections exchange.")]),s._v(" "),n("p",[s._v("This standard has AssemblyAsset event which records the exact kinds and amounts of assets the assembly token represents. The wallet can easily display those NFTs to user just by the token id.")]),s._v(" "),n("h2",{attrs:{id:"backwards-compatibility"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#backwards-compatibility"}},[s._v("#")]),s._v(" Backwards Compatibility")]),s._v(" "),n("p",[s._v("This proposal combines already available 721 extensions and is backwards compatible with the ERC-721 standard.")]),s._v(" "),n("h2",{attrs:{id:"implementation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#implementation"}},[s._v("#")]),s._v(" Implementation")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('pragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts/token/ERC20/IERC20.sol";\nimport "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";\nimport "@openzeppelin/contracts/token/ERC721/ERC721.sol";\nimport "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol";\nimport "@openzeppelin/contracts/token/ERC1155/ERC1155.sol";\nimport "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol";\nimport "./AssemblyNFTInterface.sol";\n\nabstract contract AssemblyNFT is ERC721, ERC721Holder, ERC1155Holder, AssemblyNFTInterface{\n  using SafeERC20 for IERC20;\n\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC1155Receiver) returns (bool) {\n        return ERC721.supportsInterface(interfaceId) || ERC1155Receiver.supportsInterface(interfaceId);\n  }\n\n  uint256 nonce;\n\n  /**\n  * layout of _addresses:\n  *     erc20 addresses | erc721 addresses | erc1155 addresses\n  * layout of _numbers:\n  *     eth | erc20.length | erc721.length | erc1155.length | erc20 amounts | erc721 ids | erc1155 ids | erc1155 amounts\n   */\n\n  function hash(uint256 _salt, address[] memory _addresses, uint256[] memory _numbers) public pure override returns (uint256 tokenId){\n      bytes32 signature = keccak256(abi.encodePacked(_salt));\n      for(uint256 i=0; i< _addresses.length; i++){\n        signature = keccak256(abi.encodePacked(signature, _addresses[i]));\n      }\n      for(uint256 j=0; j<_numbers.length; j++){\n        signature = keccak256(abi.encodePacked(signature, _numbers[j]));\n      }\n      assembly {\n        tokenId := signature\n      }\n  }\n\n  function mint(address _to, address[] memory _addresses, uint256[] memory _numbers) payable external override returns(uint256 tokenId){\n      require(_to != address(0), "can\'t mint to address(0)");\n      require(msg.value == _numbers[0], "value not match");\n      require(_addresses.length == _numbers[1] + _numbers[2] + _numbers[3], "2 array length not match");\n      require(_addresses.length == _numbers.length -4 - _numbers[3], "numbers length not match");\n      uint256 pointerA; //points to first erc20 address, if there is any\n      uint256 pointerB =4; //points to first erc20 amount, if there is any\n      for(uint256 i = 0; i< _numbers[1]; i++){\n        require(_numbers[pointerB] > 0, "transfer erc20 0 amount");\n        IERC20(_addresses[pointerA++]).safeTransferFrom(_msgSender(), address(this), _numbers[pointerB++]);\n      }\n      for(uint256 j = 0; j< _numbers[2]; j++){\n        IERC721(_addresses[pointerA++]).safeTransferFrom(_msgSender(), address(this), _numbers[pointerB++]);\n      }\n      for(uint256 k =0; k< _numbers[3]; k++){\n        IERC1155(_addresses[pointerA++]).safeTransferFrom(_msgSender(), address(this), _numbers[pointerB], _numbers[_numbers[3] + pointerB++], "");\n      }\n      tokenId = hash(nonce, _addresses, _numbers);\n      super._mint(_to, tokenId);\n      emit AssemblyAsset(_to, tokenId, nonce, _addresses, _numbers);\n      nonce ++;\n  }\n\n  function safeMint(address _to, address[] memory _addresses, uint256[] memory _numbers) payable external override returns(uint256 tokenId){\n      require(_to != address(0), "can\'t mint to address(0)");\n      require(msg.value == _numbers[0], "value not match");\n      require(_addresses.length == _numbers[1] + _numbers[2] + _numbers[3], "2 array length not match");\n      require(_addresses.length == _numbers.length -4 - _numbers[3], "numbers length not match");\n      uint256 pointerA; //points to first erc20 address, if there is any\n      uint256 pointerB =4; //points to first erc20 amount, if there is any\n      for(uint256 i = 0; i< _numbers[1]; i++){\n        require(_numbers[pointerB] > 0, "transfer erc20 0 amount");\n        IERC20 token = IERC20(_addresses[pointerA++]);\n        uint256 orgBalance = token.balanceOf(address(this));\n        token.safeTransferFrom(_msgSender(), address(this), _numbers[pointerB]);\n        _numbers[pointerB++] = token.balanceOf(address(this)) - orgBalance;\n      }\n      for(uint256 j = 0; j< _numbers[2]; j++){\n        IERC721(_addresses[pointerA++]).safeTransferFrom(_msgSender(), address(this), _numbers[pointerB++]);\n      }\n      for(uint256 k =0; k< _numbers[3]; k++){\n        IERC1155(_addresses[pointerA++]).safeTransferFrom(_msgSender(), address(this), _numbers[pointerB], _numbers[_numbers[3] + pointerB++], "");\n      }\n      tokenId = hash(nonce, _addresses, _numbers);\n      super._mint(_to, tokenId);\n      emit AssemblyAsset(_to, tokenId, nonce, _addresses, _numbers);\n      nonce ++;\n  }\n\n  function burn(address _to, uint256 _tokenId, uint256 _salt, address[] calldata _addresses, uint256[] calldata _numbers) override external {\n      require(_msgSender() == ownerOf(_tokenId), "not owned");\n      require(_tokenId == hash(_salt, _addresses, _numbers));\n      super._burn(_tokenId);\n      payable(_to).transfer(_numbers[0]);\n      uint256 pointerA; //points to first erc20 address, if there is any\n      uint256 pointerB =4; //points to first erc20 amount, if there is any\n      for(uint256 i = 0; i< _numbers[1]; i++){\n        require(_numbers[pointerB] > 0, "transfer erc20 0 amount");\n        IERC20(_addresses[pointerA++]).safeTransfer(_to, _numbers[pointerB++]);\n      }\n      for(uint256 j = 0; j< _numbers[2]; j++){\n        IERC721(_addresses[pointerA++]).safeTransferFrom(address(this), _to, _numbers[pointerB++]);\n      }\n      for(uint256 k =0; k< _numbers[3]; k++){\n        IERC1155(_addresses[pointerA++]).safeTransferFrom(address(this), _to, _numbers[pointerB], _numbers[_numbers[3] + pointerB++], "");\n      }\n  }\n\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br"),n("span",{staticClass:"line-number"},[s._v("90")]),n("br"),n("span",{staticClass:"line-number"},[s._v("91")]),n("br"),n("span",{staticClass:"line-number"},[s._v("92")]),n("br"),n("span",{staticClass:"line-number"},[s._v("93")]),n("br"),n("span",{staticClass:"line-number"},[s._v("94")]),n("br"),n("span",{staticClass:"line-number"},[s._v("95")]),n("br"),n("span",{staticClass:"line-number"},[s._v("96")]),n("br"),n("span",{staticClass:"line-number"},[s._v("97")]),n("br"),n("span",{staticClass:"line-number"},[s._v("98")]),n("br"),n("span",{staticClass:"line-number"},[s._v("99")]),n("br"),n("span",{staticClass:"line-number"},[s._v("100")]),n("br"),n("span",{staticClass:"line-number"},[s._v("101")]),n("br"),n("span",{staticClass:"line-number"},[s._v("102")]),n("br"),n("span",{staticClass:"line-number"},[s._v("103")]),n("br"),n("span",{staticClass:"line-number"},[s._v("104")]),n("br"),n("span",{staticClass:"line-number"},[s._v("105")]),n("br"),n("span",{staticClass:"line-number"},[s._v("106")]),n("br"),n("span",{staticClass:"line-number"},[s._v("107")]),n("br"),n("span",{staticClass:"line-number"},[s._v("108")]),n("br")])]),n("h2",{attrs:{id:"security-considerations"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#security-considerations"}},[s._v("#")]),s._v(" Security Considerations")]),s._v(" "),n("p",[s._v("Before using "),n("code",[s._v("mint")]),s._v(" or "),n("code",[s._v("safeMint")]),s._v(" functions, user should be aware that some implementations of tokens are pausable. If one of the assets get paused after assembled into one NFT, the "),n("code",[s._v("burn")]),s._v(" function may not be executed successfully. Platforms using this standard should make support lists or block lists to avoid this situation.")]),s._v(" "),n("h2",{attrs:{id:"copyright"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[s._v("#")]),s._v(" Copyright")]),s._v(" "),n("p",[s._v("Copyright and related rights waived via "),n("a",{attrs:{href:"https://creativecommons.org/publicdomain/zero/1.0/",target:"_blank",rel:"noopener noreferrer"}},[s._v("CC0"),n("OutboundLink")],1),s._v(".")])])}),[],!1,null,null,null);e.default=t.exports}}]);