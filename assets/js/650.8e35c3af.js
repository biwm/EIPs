(window.webpackJsonp=window.webpackJsonp||[]).push([[650],{1069:function(e,t,r){"use strict";r.r(t);var a=r(46),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"simple-summary"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#simple-summary"}},[e._v("#")]),e._v(" Simple Summary")]),e._v(" "),r("p",[e._v("This EIP tries to set prices of certain precompiles and built-in EVM function to be in line with their performance, consumed resources and newer changes in EVM itself.")]),e._v(" "),r("p",[e._v("New price formulas are proposed for:")]),e._v(" "),r("ul",[r("li",[e._v("SHA256 precompile ("),r("code",[e._v("0x02")]),e._v(")")]),e._v(" "),r("li",[e._v("RIPEMD precompile ("),r("code",[e._v("0x03")]),e._v(")")]),e._v(" "),r("li",[e._v("KECCAK256 opcode ("),r("code",[e._v("0x20")]),e._v(")")])]),e._v(" "),r("h2",{attrs:{id:"abstract"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),r("p",[e._v("Costs of many precompiles and built-in functions are invalid at the current state of the clients. This EIP contains a list of changes to the pricing formulas to better reflect underlying computations' structure.")]),e._v(" "),r("h2",{attrs:{id:"motivation"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),r("p",[e._v("Historical pricing for these functions in EVM does not reflect inner structure of the underlying computations (inner structure of the hash functions).")]),e._v(" "),r("ul",[r("li",[e._v("EIP-2046 changes a "),r("code",[e._v("STATICCALL (0xfa)")]),e._v(" cost to precompile and it may be necessary to adjust costs of some precompiles that "),r("em",[e._v("may")]),e._v(" have taken old large cost ("),r("code",[e._v("700")]),e._v(" gas) into account and tried to compensate for it")]),e._v(" "),r("li",[e._v("Some precompiles are overpriced and their pricing formulas do not reflect the structure of underlying functions")]),e._v(" "),r("li",[e._v("Keccak256 built-in function (opcode) in EVM has pricing that does not reflect underlying hash function structure")])]),e._v(" "),r("h2",{attrs:{id:"specification"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),r("p",[e._v("If "),r("code",[e._v("block_number >= X")]),e._v(" set the gas cost of the following precompiles and Keccak256 opcode:")]),e._v(" "),r("ul",[r("li",[e._v("SHA256 (precompile "),r("code",[e._v("0x02")]),e._v("): "),r("code",[e._v("10 + ((len(input) + 8)/64 + 1) * 9")])]),e._v(" "),r("li",[e._v("RIPEMD (precompile "),r("code",[e._v("0x03")]),e._v("): "),r("code",[e._v("6 + ((len(input) + 8)/64 + 1) * 12")])]),e._v(" "),r("li",[e._v("KECCAK256 ("),r("code",[e._v("0x20")]),e._v("): "),r("code",[e._v("13 + (len(input)/136 + 1)*15")])])]),e._v(" "),r("p",[e._v("This EIP "),r("em",[e._v("ideally")]),e._v(" requires that "),r("code",[e._v("MODEXP")]),e._v(" repricing is "),r("RouterLink",{attrs:{to:"/zh/eip-2565.html"}},[e._v("implemented")]),e._v(" to also accurately reflect that there is no implicit compensation for an old "),r("code",[e._v("STATICCALL (0xfa)")]),e._v(" cost (pre-2046).")],1),e._v(" "),r("h2",{attrs:{id:"rationale"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rationale"}},[e._v("#")]),e._v(" Rationale")]),e._v(" "),r("p",[e._v("Cost of functions being executed must accurately reflect real CPU time spent on computations, so benchmarking was performed for current precompiles and Keccak256 function to measure running time versus input parameters.")]),e._v(" "),r("h3",{attrs:{id:"detailed-summary-of-repricing-approach"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#detailed-summary-of-repricing-approach"}},[e._v("#")]),e._v(" Detailed summary of repricing approach")]),e._v(" "),r("p",[e._v("This EIP relies on two facts:")]),e._v(" "),r("ul",[r("li",[e._v("apriori knowledge of the inner strucute of the hash functions")]),e._v(" "),r("li",[e._v("benchmarks provided by the client teams for some reasonable range of input lengths for random inputs (random byte strings of a given length)")])]),e._v(" "),r("h3",{attrs:{id:"benchmarks-on-the-most-popular-clients"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#benchmarks-on-the-most-popular-clients"}},[e._v("#")]),e._v(" Benchmarks on the most popular clients")]),e._v(" "),r("p",[e._v("Necessary benchmarks for EIP-2666 were provided by the clients and raw form is assembled in "),r("a",{attrs:{href:"https://docs.google.com/spreadsheets/d/1aCQnk7prrp3Mbcf011BE5zZnkbc3Iw7QAixn6mLbKS0/edit?usp=sharing",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),r("OutboundLink")],1)]),e._v(" "),r("ul",[r("li",[e._v("SHA256 precompile")])]),e._v(" "),r("p",[e._v("Currently it's "),r("code",[e._v("60")]),e._v(" gas + "),r("code",[e._v("12")]),e._v(" gas per "),r("code",[e._v("32")]),e._v(" byte word (number of words is "),r("code",[e._v("ceil(len(input)/word_len)")]),e._v(" here and in similar places. If there is no "),r("code",[e._v("floor")]),e._v(" or "),r("code",[e._v("ceil")]),e._v(" specifier all divisions below are integer divisions (floor divisions)). Proposed formula is "),r("code",[e._v("A * ((len(input) + 8) / 64 + 1) + B")]),e._v(", with coefficients below")]),e._v(" "),r("p",[e._v("|            |  | A  | B  |\n| ---------- |  | -- | -- |\n| Geth       |  | 5  | 3  |\n| OE         |  | 9  | 4  |\n| Besu       |  | 5  | 10 |\n| Nethermind |  | 10 | 5  |")]),e._v(" "),r("p",[e._v("EIP-2666 proposes "),r("code",[e._v("A = 9")]),e._v(", "),r("code",[e._v("B = 10")]),e._v(". There are no large one-off costs in this precompile, so it's EIP-2046 - safe.")]),e._v(" "),r("ul",[r("li",[e._v("RIPEMD precompile")])]),e._v(" "),r("p",[e._v("Currently it's "),r("code",[e._v("600")]),e._v(" gas + "),r("code",[e._v("120")]),e._v(" gas per "),r("code",[e._v("32")]),e._v(" byte word. Proposed formula is "),r("code",[e._v("A * ((len(input) + 8) / 64 + 1) + B")]),e._v(", with coefficients below")]),e._v(" "),r("p",[e._v("|            |  | A  | B  |\n| ---------- |  | -- | -- |\n| Geth       |  | 12 | 6  |\n| OE         |  | 8  | 2  |\n| Besu       |  | 29 | 16 |\n| Nethermind |  | 10 | 6  |")]),e._v(" "),r("p",[e._v("EIP-2666 proposes "),r("code",[e._v("A = 12")]),e._v(", "),r("code",[e._v("B = 6")]),e._v(". There are no large one-off costs in this precompile, so it's EIP-2046 - safe. Besu expects to have performance improvements by the end of the year.")]),e._v(" "),r("ul",[r("li",[e._v("Keccak256 performance")])]),e._v(" "),r("p",[e._v("Currently it's "),r("code",[e._v("30")]),e._v(" gas + "),r("code",[e._v("6")]),e._v(" gas per "),r("code",[e._v("32")]),e._v(" byte word. Proposed formula is "),r("code",[e._v("A * (len(input) / 136 + 1) + B")]),e._v(", with coefficients below")]),e._v(" "),r("p",[e._v("|            |  | A  | B  |\n| ---------- |  | -- | -- |\n| Geth       |  | 13 | 13 |\n| OE         |  | 15 | 2  |\n| Besu       |  | 19 | 28 |\n| Nethermind |  | 16 | 3  |")]),e._v(" "),r("p",[e._v("EIP-2666 proposes "),r("code",[e._v("A = 15")]),e._v(", "),r("code",[e._v("B = 13")]),e._v(". There are no large one-off costs in this precompile, so it's EIP-2046 - safe. Besu expects to have performance improvements by the end of the year.")]),e._v(" "),r("h3",{attrs:{id:"tooling-and-data"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tooling-and-data"}},[e._v("#")]),e._v(" Tooling and data")]),e._v(" "),r("p",[e._v("Reference material (from benchmarks of different clients) with raw data can be found "),r("a",{attrs:{href:"https://docs.google.com/spreadsheets/d/1aCQnk7prrp3Mbcf011BE5zZnkbc3Iw7QAixn6mLbKS0/edit?usp=sharing",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),r("OutboundLink")],1),e._v(".")]),e._v(" "),r("p",[e._v("There is a repository available with inputs for benchmarking and precompiles testing "),r("a",{attrs:{href:"https://github.com/shamatar/bench_precompiles",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),r("OutboundLink")],1),e._v(" that can be used by client teams to perform all the necessary measurements.")]),e._v(" "),r("p",[e._v("Raw Besu "),r("a",{attrs:{href:"https://gist.github.com/shemnon/0ddba91be501fa23291bdec9107fe99a",target:"_blank",rel:"noopener noreferrer"}},[e._v("benchmarks"),r("OutboundLink")],1),e._v(".")]),e._v(" "),r("h3",{attrs:{id:"note-on-formulas-structure"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#note-on-formulas-structure"}},[e._v("#")]),e._v(" Note on formulas structure")]),e._v(" "),r("p",[e._v("There are terms in formulas that look like "),r("code",[e._v("A * 1")]),e._v(" and those are explicitly not combined to the "),r("code",[e._v("B")]),e._v(" coefficient to reflect that hash of an empty byte array requires to perform a round of hashing anyway.")]),e._v(" "),r("h2",{attrs:{id:"backwards-compatibility"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#backwards-compatibility"}},[e._v("#")]),e._v(" Backwards Compatibility")]),e._v(" "),r("p",[e._v("Precompile repricings has happened in a past and can be considered standard procedure. Gas costs of many contracts is expected to reduce that may break re-entrancy protection measures based on fixed gas costs. In any case, such protection should have never been considered good and final.")]),e._v(" "),r("h2",{attrs:{id:"test-cases"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#test-cases"}},[e._v("#")]),e._v(" Test Cases")]),e._v(" "),r("p",[e._v("Let's consider a simple example of Keccak256 hash of "),r("code",[e._v("0")]),e._v(", "),r("code",[e._v("64")]),e._v(" and "),r("code",[e._v("160")]),e._v(" bytes that can is a simple sanity check for implementation.")]),e._v(" "),r("ul",[r("li",[e._v("Hash "),r("code",[e._v("0")]),e._v(" bytes:\n"),r("ul",[r("li",[e._v("Old price: "),r("code",[e._v("30 + 6 * ceil(0 / 32) = 30")]),e._v(" gas")]),e._v(" "),r("li",[e._v("New price: "),r("code",[e._v("15 * (0/136 + 1) + 13 = 28")]),e._v(" gas")])])]),e._v(" "),r("li",[e._v("Hash "),r("code",[e._v("64")]),e._v(" bytes\n"),r("ul",[r("li",[e._v("Old price: "),r("code",[e._v("30 + 6 * ceil(64 / 32) = 42")]),e._v(" gas")]),e._v(" "),r("li",[e._v("New price: "),r("code",[e._v("15 * (64/136 + 1) + 13 = 28")]),e._v(" gas")])])]),e._v(" "),r("li",[e._v("Hash "),r("code",[e._v("160")]),e._v(" bytes\n"),r("ul",[r("li",[e._v("Old price: "),r("code",[e._v("30 + 6 * ceil(160 / 32) = 60")]),e._v(" gas")]),e._v(" "),r("li",[e._v("New price: "),r("code",[e._v("15 * (160/136 + 1) + 13 = 43")]),e._v(" gas")])])])]),e._v(" "),r("h2",{attrs:{id:"implementation"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#implementation"}},[e._v("#")]),e._v(" Implementation")]),e._v(" "),r("p",[e._v("There is no reference implementation at the time of writing as it requires just a simple change of constants in major clients.")]),e._v(" "),r("h2",{attrs:{id:"security-considerations"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#security-considerations"}},[e._v("#")]),e._v(" Security Considerations")]),e._v(" "),r("p",[e._v("As described in backward compatibility section in some cases reduction of cost may allow e.g. re-entrancy that was not expected before, but we think that re-entrancy protection based on fixed gas costs is anyway flawed design decision.")]),e._v(" "),r("h2",{attrs:{id:"copyright"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),r("p",[e._v("Copyright and related rights waived via "),r("a",{attrs:{href:"https://creativecommons.org/publicdomain/zero/1.0/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CC0"),r("OutboundLink")],1),e._v(".")])])}),[],!1,null,null,null);t.default=o.exports}}]);