(window.webpackJsonp=window.webpackJsonp||[]).push([[775],{1201:function(e,t,a){"use strict";a.r(t);var s=a(46),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"simple-summary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#simple-summary"}},[e._v("#")]),e._v(" Simple Summary")]),e._v(" "),a("p",[e._v("Support performant and cheap verification of Ed25519 cryptographic signatures in smart contracts in general by adding a precompiled contract for Ed25519 signature verification to the EVM.")]),e._v(" "),a("h2",{attrs:{id:"abstract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),a("p",[e._v("Verification of Ed25519 cryptographic signatures is obviously possible in EVM bytecode. However, the gas cost will be very high, and computationally expensive, as such tight, wide word operations intensive code as required for Ed25519 is not a good fit for the EVM bytecode model.")]),e._v(" "),a("p",[e._v("The addition of a native compiled function, in a precompiled contract, to the EVM solves both cost and performance problems.")]),e._v(" "),a("h2",{attrs:{id:"motivation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),a("p",[e._v("Ed25519 and Ed448 (that is, EdDSA using Curve25519 or Curve448) are IETF recommendations ("),a("a",{attrs:{href:"https://tools.ietf.org/html/rfc7748",target:"_blank",rel:"noopener noreferrer"}},[e._v("RFC7748"),a("OutboundLink")],1),e._v(") with some attractive properties:")]),e._v(" "),a("ul",[a("li",[e._v("Ed25519 is intended to operate at around the 128-bit security level and Ed448 at around the 224-bit security level")]),e._v(" "),a("li",[e._v("EdDSA uses small public keys (32 or 57 octets) and signatures (64 or 114 octets) for Ed25519 and Ed448, respectively")]),e._v(" "),a("li",[e._v("Ed25519/Ed448 are designed so that fast, constant-time (timing attack resistant) and generally side-channel resistant  implementations are easier to produce")])]),e._v(" "),a("p",[e._v("Despite being around only for some years, post-Snowden, these curves "),a("a",{attrs:{href:"https://ianix.com/pub/ed25519-deployment.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("have gained wide use"),a("OutboundLink")],1),e._v(" quickly in various protocols and systems:")]),e._v(" "),a("ul",[a("li",[e._v("TLS / ECDH(E) (session keys)")]),e._v(" "),a("li",[e._v("TLS / x.509 (client and server certificates)")]),e._v(" "),a("li",[e._v("DNSSEC (zone signing)")]),e._v(" "),a("li",[e._v("OpenSSH (user keys)")]),e._v(" "),a("li",[e._v("GNUPG/OpenPGP (user keys)")]),e._v(" "),a("li",[e._v("OpenBSD Signify (software signing)")])]),e._v(" "),a("p",[e._v("One motivation for Ed25519 signature verification in smart contracts is to "),a("strong",[e._v("associate")]),e._v(" existing off-chain systems, records or accounts that use Ed25519 (like above) with blockchain addresses or "),a("strong",[e._v("delegate")]),e._v(" by allowing to sign data with Ed25519 (only), and then submit this Ed25519-signed data anonymously (via any Eth sender address) to the blockchain, having the contract check the Ed25519 signature of the transaction.")]),e._v(" "),a("p",[e._v("Another motivation is the processing of external, Ed25519 proof-of-stake based blockchains within Ethereum smart contracts.")]),e._v(" "),a("p",[e._v("When a transactions contains data that comes with an Ed25519 signature, that proves that the sender of the Ethereum transaction was also in control of the private key (and the data), and this allows the contract to establish an association between the blockchain and the external system or account, and the external system establish the reverse relation.")]),e._v(" "),a("p",[e._v("For example, a contract might check a Ed25519 signed piece of data submitted to the Ethereum transaction like the current block number. That proves to the contract, that the sender is in possession of both the Ethereum private key and the Ed25519 private key, and hence the contract will accept an association between both. This again can be the root anchor for various powerful applications, as now a potentially crypto holding key owner has proven to be in control of some external off-chain system or account, like e.g. a DNS server, a DNS domain, a cluster node and so on.")]),e._v(" "),a("h2",{attrs:{id:"specification"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),a("p",[e._v("If "),a("code",[e._v("block.number >= CONSTANTINOPLE_FORK_BLKNUM")]),e._v(", add a precompiled contract for Ed25519 signature verification ("),a("code",[e._v("ED25519VFY")]),e._v(").")]),e._v(" "),a("p",[e._v("The proposal adds a new precompiled function "),a("code",[e._v("ED25519VFY")]),e._v(" with the following input and output.")]),e._v(" "),a("p",[a("code",[e._v("ED25519VFY")]),e._v(" takes as "),a("strong",[e._v("input 128 octets")]),e._v(":")]),e._v(" "),a("ol",[a("li",[a("strong",[e._v("message")]),e._v(": the 32-octet message that was signed")]),e._v(" "),a("li",[a("strong",[e._v("public key")]),e._v(": the 32-octet Ed25519 public key of the signer")]),e._v(" "),a("li",[a("strong",[e._v("signature")]),e._v(": the 64-octet Ed25519 signature")])]),e._v(" "),a("p",[a("code",[e._v("ED25519VFY")]),e._v(" returns as "),a("strong",[e._v("output 4 octets")]),e._v(":")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("0x00000000")]),e._v(" if signature is valid")]),e._v(" "),a("li",[e._v("any non-zero value indicates a signature verification failure")])]),e._v(" "),a("h3",{attrs:{id:"address"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#address"}},[e._v("#")]),e._v(" Address")]),e._v(" "),a("p",[e._v("The address of "),a("code",[e._v("ED25519VFY")]),e._v(" is "),a("strong",[a("code",[e._v("0x9")]),e._v(".")])]),e._v(" "),a("h3",{attrs:{id:"gas-costs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gas-costs"}},[e._v("#")]),e._v(" Gas costs")]),e._v(" "),a("p",[e._v("Gas cost for "),a("code",[e._v("ED25519VFY")]),e._v(" is "),a("strong",[e._v("2000")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"rationale"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rationale"}},[e._v("#")]),e._v(" Rationale")]),e._v(" "),a("p",[e._v("The proposed "),a("code",[e._v("ED25519VFY")]),e._v(" function takes the signer public key as a call parameter, as with Ed25519, I don't believe it is possible to derive the signers public key from the signature and message alone.")]),e._v(" "),a("p",[e._v("The proposed "),a("code",[e._v("ED25519VFY")]),e._v(" function uses a zero return value to indicate success, since this allows for different errors to be distinguished by return value, as all non-zero return values signal a verification failure.")]),e._v(" "),a("p",[a("code",[e._v("ECRECOVER")]),e._v(" has a gas cost of 3000. Since Ed25519 is computationally cheaper, the gas price should be less.")]),e._v(" "),a("h2",{attrs:{id:"backwards-compatibility"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#backwards-compatibility"}},[e._v("#")]),e._v(" Backwards Compatibility")]),e._v(" "),a("p",[e._v("As the proposed precompiled contract is deployed at a reserved (<255) and previously unused address, an implementation of the proposal should not introduce any backward compatibility issues.")]),e._v(" "),a("h2",{attrs:{id:"test-cases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#test-cases"}},[e._v("#")]),e._v(" Test Cases")]),e._v(" "),a("p",[e._v("Test vectors for Ed25519 can be found in this IETF ID https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-6.")]),e._v(" "),a("p",[e._v("More test vectors can be found in the regression tests of NaCl (see references).")]),e._v(" "),a("h2",{attrs:{id:"implementation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implementation"}},[e._v("#")]),e._v(" Implementation")]),e._v(" "),a("h3",{attrs:{id:"libsodium"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#libsodium"}},[e._v("#")]),e._v(" libsodium")]),e._v(" "),a("p",[e._v("libsodium is a mature, high-quality C implementation of Ed25519, with bindings for many languages.")]),e._v(" "),a("p",[e._v("Further, libsodium is (to my knowledge, and as of today 2018/04) the only Ed25519 implementation that has gone through a "),a("a",{attrs:{href:"https://www.privateinternetaccess.com/blog/2017/08/libsodium-v1-0-12-and-v1-0-13-security-assessment/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Security Assessment"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("To minimize consensus failure risks, the proposal recommends to use libsodium for adding the precompile in all Ethereum client implementations.")]),e._v(" "),a("blockquote",[a("p",[e._v('Note: as an alternative to libsodium, I looked into HACL, an implementation of Ed25519 in F* (a ML dialect) that can be transpiled to C, and that was formally verified for functional correctness and memory safety of the resulting C code. However, this is new and compared to libsodium which is a "know thing" seems risky nevertheless.')])]),e._v(" "),a("h3",{attrs:{id:"libsodium-bindings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#libsodium-bindings"}},[e._v("#")]),e._v(" libsodium bindings")]),e._v(" "),a("p",[e._v("Here is an overview of the language bindings to libsodium for four Ethereum clients this proposal recommends:")]),e._v(" "),a("h2",{attrs:{id:"client-language-libsodium-binding-geth-go-use-cgo-with-c-libsodium-parity-rust-sodiumoxide-pyethereum-python-pynacl-cpp-ethereum-c-libsodium"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#client-language-libsodium-binding-geth-go-use-cgo-with-c-libsodium-parity-rust-sodiumoxide-pyethereum-python-pynacl-cpp-ethereum-c-libsodium"}},[e._v("#")]),e._v(" |  | Client       | Language | libsodium binding                                                 |\n|  | ------------ | -------- | ----------------------------------------------------------------- |\n|  | Geth         | Go       | use cgo with C "),a("a",{attrs:{href:"https://github.com/jedisct1/libsodium",target:"_blank",rel:"noopener noreferrer"}},[e._v("libsodium"),a("OutboundLink")],1),e._v(" |\n|  | Parity       | Rust     | "),a("a",{attrs:{href:"https://github.com/dnaq/sodiumoxide",target:"_blank",rel:"noopener noreferrer"}},[e._v("sodiumoxide"),a("OutboundLink")],1),e._v("                |\n|  | PyEthereum   | Python   | "),a("a",{attrs:{href:"https://github.com/pyca/pynacl",target:"_blank",rel:"noopener noreferrer"}},[e._v("PyNaCl"),a("OutboundLink")],1),e._v("                          |\n|  | cpp-ethereum | C++      | "),a("a",{attrs:{href:"https://github.com/jedisct1/libsodium",target:"_blank",rel:"noopener noreferrer"}},[e._v("libsodium"),a("OutboundLink")],1),e._v("                |")]),e._v(" "),a("h3",{attrs:{id:"prs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prs"}},[e._v("#")]),e._v(" PRs")]),e._v(" "),a("p",[e._v("Implementations of this proposal are here:")]),e._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://github.com/ethereum/go-ethereum/pull/16453",target:"_blank",rel:"noopener noreferrer"}},[e._v("go-ethereum PR #16453"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/ethereum/pyethereum/pull/862",target:"_blank",rel:"noopener noreferrer"}},[e._v("pyethereum PR #862"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/paritytech/parity/pull/8330",target:"_blank",rel:"noopener noreferrer"}},[e._v("parity PR #8330"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/ethereum/cpp-ethereum/pull/4945",target:"_blank",rel:"noopener noreferrer"}},[e._v("cpp-ethereum PR #4945"),a("OutboundLink")],1)])]),e._v(" "),a("h2",{attrs:{id:"references"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),a("ul",[a("li",[e._v("RFC7748 - Elliptic Curves for Security https://tools.ietf.org/html/rfc7748")]),e._v(" "),a("li",[e._v("Definition of Ed25519: https://ed25519.cr.yp.to/ed25519-20110926.pdf")]),e._v(" "),a("li",[e._v("Ed25519 - high-speed high-security signatures: https://ed25519.cr.yp.to/")]),e._v(" "),a("li",[e._v("NaCl - Networking and Cryptography library: https://nacl.cr.yp.to/sign.html")]),e._v(" "),a("li",[e._v("NaCl Crypto Libraries (which contains Ed25519): https://ianix.com/pub/ed25519-deployment.html")]),e._v(" "),a("li",[e._v("Test vectors for Ed25519: https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-6")]),e._v(" "),a("li",[e._v("NaCl regression tests: https://ed25519.cr.yp.to/python/sign.py and https://ed25519.cr.yp.to/python/sign.input")]),e._v(" "),a("li",[e._v("On the recoverability of public keys from signature+message (alone): https://crypto.stackexchange.com/questions/9936/what-signature-schemes-allow-recovering-the-public-key-from-a-signature")]),e._v(" "),a("li",[e._v('Bernstein, D., "Curve25519: new Diffie-Hellman speed records", DOI 10.1007/11745853_14, February 2006, https://cr.yp.to/ecdh.html')]),e._v(" "),a("li",[e._v('Hamburg, M., "Ed448-Goldilocks, a new elliptic curve", June 2015, https://eprint.iacr.org/2015/625>')]),e._v(" "),a("li",[e._v("RFC8080: Edwards-Curve Digital Security Algorithm (EdDSA) for DNSSEC (https://tools.ietf.org/html/rfc8080)")])]),e._v(" "),a("h2",{attrs:{id:"copyright"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),a("p",[e._v("Copyright and related rights waived via "),a("a",{attrs:{href:"https://creativecommons.org/publicdomain/zero/1.0/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CC0"),a("OutboundLink")],1),e._v(".")])])}),[],!1,null,null,null);t.default=r.exports}}]);