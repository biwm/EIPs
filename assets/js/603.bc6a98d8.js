(window.webpackJsonp=window.webpackJsonp||[]).push([[603],{1018:function(e,t,a){"use strict";a.r(t);var s=a(46),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"simple-summary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#simple-summary"}},[e._v("#")]),e._v(" Simple Summary")]),e._v(" "),a("p",[e._v("We are proposing Alias - a semantic standard for identifying on-chain resources by human-readable qualifiers, supporting any type of data.")]),e._v(" "),a("h2",{attrs:{id:"abstract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),a("p",[e._v("The dType Alias is a system for providing human-readable resource identifiers to on-chain content. A resource identifier is based on the type of data (identifier provided by dType, "),a("RouterLink",{attrs:{to:"/zh/eip-1900.html"}},[e._v("EIP-1900")]),e._v(") and the data content (identifier provided by a dType Storage Contract, "),a("RouterLink",{attrs:{to:"/zh/eip-2157.html"}},[e._v("EIP-2157")]),e._v("). It is a universal way of addressing content, supporting any type of data.")],1),e._v(" "),a("h2",{attrs:{id:"motivation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),a("p",[e._v("There are standards that currently address the need for attaching human-readable identifiers to Ethereum accounts, such as "),a("RouterLink",{attrs:{to:"/zh/eip-137.html"}},[e._v("EIP-137")]),e._v(". These standards are an attempt to bring domain names to Ethereum, following the same format as DNS: "),a("code",[e._v("subdomain.domain.tld")]),e._v(". This leaf -> root format is unintuitive and contradicts the semantic meaning that "),a("code",[e._v(".")]),e._v(" has in programming languages, which is a root -> leaf connection (e.g. in OOP, when accessing an object's property). A more intuitive and widely used approach is a root->leaf format, used in file browsers, hierarchical menus, and even in other decentralized systems, which give unique identifiers to resources (e.g. "),a("code",[e._v("0x56.Currency.TCoin")]),e._v(" in "),a("a",{attrs:{href:"https://medium.com/r/?url=https%3A%2F%2Fdevelopers.libra.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("Libra"),a("OutboundLink")],1),e._v(".")],1),e._v(" "),a("p",[e._v("Moreover, "),a("RouterLink",{attrs:{to:"/zh/eip-137.html"}},[e._v("EIP-137")]),e._v(" is not flexible enough to address smart contract content,  which can contain heterogeneous data that belongs to various accounts. For example, a "),a("code",[e._v("PaymentChannel")]),e._v(" smart contract can have an domain name. However, the "),a("code",[e._v("Alice-Bob")]),e._v(" channel data from inside the smart contract, cannot have a subdomain name. Having uniquely identified, granular resources opens the way to creating both human and machine-readable protocols on top of Ethereum. It also provides a basis for protocols based on functional programming.")],1),e._v(" "),a("p",[e._v("This ERC proposes a set of separators which maintain their semantic meaning and provides a way to address any type of resource - from Ethereum addresses, to individual "),a("code",[e._v("struct")]),e._v(" instances inside smart contracts.")]),e._v(" "),a("p",[e._v("Imagine the following dType types: "),a("code",[e._v("SocialNetwork")]),e._v(" and "),a("code",[e._v("Profile")]),e._v(", with related storage data about user profiles. One could access such a profile using an alias for the data content: "),a("code",[e._v("alice@socialnetwork.profile")]),e._v(". For a "),a("code",[e._v("PaymentChannel")]),e._v(" type, Alice can refer to her channel with Bob with "),a("code",[e._v("alice-bob.paymentchannel")]),e._v(". This alias system can be used off-chain, to replace the old DNS system with a deterministic and machine-readable way of displaying content, based on the dType type's metadata.")]),e._v(" "),a("h2",{attrs:{id:"specification"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),a("p",[e._v("The dType registry will provide domain and subdomain names for the resource type. Subdomains can be attributed recursively, to dType types which contain other complex types in their composition.")]),e._v(" "),a("p",[e._v("We define an "),a("code",[e._v("Alias")]),e._v(" registry contract, that keeps track of the human-readable identifiers for data resources, which exist in dType storage contracts. Anyone can set an alias in the "),a("code",[e._v("Alias")]),e._v(" registry, as long as the Ethereum address that signs the alias data has ownership on the resource, in the dType storage contract. Storage contract data ownership will be detailed in "),a("RouterLink",{attrs:{to:"/zh/eip-2157.html"}},[e._v("EIP-2157")]),e._v(". An owner can update or delete an alias at any time.")],1),e._v(" "),a("div",{staticClass:"language-solidity line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-solidity"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("interface")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Alias")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("event")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("AliasSet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("bytes32")]),e._v(" dtypeIdentifier"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("bytes1")]),e._v(" separator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("string")]),e._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("bytes32")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("indexed")]),e._v(" identifier"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("setAlias")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("bytes32")]),e._v(" dtypeIdentifier"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("bytes1")]),e._v(" separator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("string")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("memory")]),e._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("bytes32")]),e._v(" identifier"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("bytes")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("memory")]),e._v(" signature"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("external")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("getAliased")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("bytes1")]),e._v(" separator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("string")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("memory")]),e._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("view")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("external")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("returns")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("bytes32")]),e._v(" identifier"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br")])]),a("ul",[a("li",[a("code",[e._v("dtypeIdentifier")]),e._v(": Type identifier from the dType registry, needed to ensure uniqueness of "),a("code",[e._v("name")]),e._v(" for a dType type. "),a("code",[e._v("dtypeIdentifier")]),e._v(" is checked to see if it exists in the dType registry. The dType registry also links the type's data storage contract, where the existence and ownership of the "),a("code",[e._v("identifier")]),e._v(" is checked.")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": user-defined human-readable name for the resource referenced by "),a("code",[e._v("identifier")])]),e._v(" "),a("li",[a("code",[e._v("separator")]),e._v(": Character acting as a separator between the name and the rest of the alias. Allowed values:\n"),a("ul",[a("li",[a("code",[e._v(".")]),e._v(": general domain separation, using root->leaf semantics. E.g. "),a("code",[e._v("domain.subdomain.leafsubdomain.resource")])]),e._v(" "),a("li",[a("code",[e._v("@")]),e._v(": identifying actor-related data, such as user profiles, using leaf->root semantics. E.g. "),a("code",[e._v("alice@socialnetwork.profile")]),e._v(" or "),a("code",[e._v("alice@dao@eth")])]),e._v(" "),a("li",[a("code",[e._v("#")]),e._v(": identifying concepts, using root->leaf semantics. E.g. "),a("code",[e._v("topicX#postY")])]),e._v(" "),a("li",[a("code",[e._v("/")]),e._v(": general resource path definition, using root->leaf semantics. E.g. "),a("code",[e._v("resourceRoot/resource")])])])]),e._v(" "),a("li",[a("code",[e._v("identifier")]),e._v(": Resource identifier from a smart contract linked with dType")]),e._v(" "),a("li",[a("code",[e._v("signature")]),e._v(": Alias owner signature on "),a("code",[e._v("dtypeIdentifier")]),e._v(", "),a("code",[e._v("identifier")]),e._v(", "),a("code",[e._v("name")]),e._v(", "),a("code",[e._v("separator")]),e._v(", "),a("code",[e._v("nonce")]),e._v(", "),a("code",[e._v("aliasAddress")]),e._v(", "),a("code",[e._v("chainId")]),e._v(".\n"),a("ul",[a("li",[a("code",[e._v("nonce")]),e._v(": monotonically increasing counter, used to prevent replay attacks")]),e._v(" "),a("li",[a("code",[e._v("aliasAddress")]),e._v(": Ethereum address of "),a("code",[e._v("Alias")]),e._v(" contract")]),e._v(" "),a("li",[a("code",[e._v("chainId")]),e._v(": chain on which the "),a("code",[e._v("Alias")]),e._v(" contract is deployed, as detailed in "),a("RouterLink",{attrs:{to:"/zh/eip-155.html"}},[e._v("EIP-155")]),e._v(", used to prevent replay attacks when updating the "),a("code",[e._v("identifier")]),e._v(" for an alias.")],1)])])]),e._v(" "),a("p",[e._v("Content addressability can be done:")]),e._v(" "),a("ul",[a("li",[e._v("using the "),a("code",[e._v("bytes32")]),e._v(" identifiers directly, e.g. "),a("code",[e._v("0x0b5e76559822448f6243a6f76ac7864eba89c810084471bdee2a63429c92d2e7@0x9dbb9abe0c47484c5707699b3ceea23b1c2cca2ac72681256ab42ae01bd347da")])]),e._v(" "),a("li",[e._v("using the human identifiers, e.g. "),a("code",[e._v("alice@socialnetwork")])])]),e._v(" "),a("p",[e._v("Both of the above examples will resolve to the same content.")]),e._v(" "),a("h2",{attrs:{id:"rationale"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rationale"}},[e._v("#")]),e._v(" Rationale")]),e._v(" "),a("p",[e._v("Current attempts to solve content addressability, such as "),a("RouterLink",{attrs:{to:"/zh/eip-137.html"}},[e._v("EIP-137")]),e._v(", only target Ethereum accounts. These are based on inherited concepts from HTTP and DNS, which are not machine friendly.")],1),e._v(" "),a("p",[e._v("With "),a("RouterLink",{attrs:{to:"/zh/eip-1900.html"}},[e._v("EIP-1900")]),e._v(" and "),a("RouterLink",{attrs:{to:"/zh/eip-2157.html"}},[e._v("EIP-2157")]),e._v(", general content addressability can be achieved. dType provides type information and a reference to the smart contract where the type instances are stored. Additionally, Alias uses the semantic meaning of subdomain separators to have a "),a("a",{attrs:{href:"https://github.com/loredanacirstea/articles/blob/master/articles/Flexible_Alias_or_Why_ENS_is_Obsolete.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("intuitive order rule"),a("OutboundLink")],1),e._v(".")],1),e._v(" "),a("p",[e._v("Multiple aliases can be assigned to a single resource. Either by using a different "),a("code",[e._v("name")]),e._v(" or by using a different "),a("code",[e._v("separator")]),e._v(". Each "),a("code",[e._v("separator")]),e._v(" can have a specific standard for displaying and processing data, based on its semantic meaning.")]),e._v(" "),a("h2",{attrs:{id:"backwards-compatibility"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#backwards-compatibility"}},[e._v("#")]),e._v(" Backwards Compatibility")]),e._v(" "),a("p",[e._v("Will be added.")]),e._v(" "),a("h2",{attrs:{id:"test-cases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#test-cases"}},[e._v("#")]),e._v(" Test Cases")]),e._v(" "),a("p",[e._v("Will be added.")]),e._v(" "),a("h2",{attrs:{id:"implementation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implementation"}},[e._v("#")]),e._v(" Implementation")]),e._v(" "),a("p",[e._v("An in-work implementation can be found at https://github.com/pipeos-one/dType/blob/master/contracts/contracts/Alias.sol. This proposal will be updated with an appropriate implementation when consensus is reached on the specifications.")]),e._v(" "),a("h2",{attrs:{id:"copyright"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),a("p",[e._v("Copyright and related rights waived via "),a("a",{attrs:{href:"https://creativecommons.org/publicdomain/zero/1.0/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CC0"),a("OutboundLink")],1),e._v(".")])])}),[],!1,null,null,null);t.default=n.exports}}]);