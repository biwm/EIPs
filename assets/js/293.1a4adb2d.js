(window.webpackJsonp=window.webpackJsonp||[]).push([[293],{693:function(e,t,a){"use strict";a.r(t);var o=a(46),n=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"simple-summary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#simple-summary"}},[e._v("#")]),e._v(" Simple Summary")]),e._v(" "),a("p",[e._v("Adds support for transmission of typed transactions over devp2p.")]),e._v(" "),a("h2",{attrs:{id:"abstract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),a("p",[a("RouterLink",{attrs:{to:"/eip-2718.html"}},[e._v("Typed Transactions")]),e._v(" can be sent over devp2p as "),a("code",[e._v("TransactionType || TransactionPayload")]),e._v(".\nThe exact contents of the "),a("code",[e._v("TransactionPayload")]),e._v(" are defined by the "),a("code",[e._v("TransactionType")]),e._v(" in future EIPs, and clients may start supporting their gossip without incrementing the devp2p version.\nIf a client receives a "),a("code",[e._v("TransactionType")]),e._v(" that it doesn't recognize, it "),a("strong",[e._v("SHOULD")]),e._v(" disconnect from the peer who sent it.\nClients "),a("strong",[e._v("MUST NOT")]),e._v(" send new transaction types before they believe the fork block is reached.")],1),e._v(" "),a("h2",{attrs:{id:"motivation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),a("p",[a("RouterLink",{attrs:{to:"/eip-2718.html"}},[e._v("EIP-2718")]),e._v(" introduced new transaction types for blocks (which presents itself in the makeup of a block header's transaction root and receipts root).\nHowever, without a mechanism for gossiping these transactions, no one can actually include them in a block.\nBy updating devp2p to support the gossip of Typed Transactions, we can benefit from these new transaction types.")],1),e._v(" "),a("p",[a("em",[e._v("Note: See "),a("RouterLink",{attrs:{to:"/eip-2718.html"}},[e._v("EIP-2718")]),e._v(" for additional motivations of Typed Transactions.")],1)]),e._v(" "),a("h2",{attrs:{id:"specification"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),a("p",[e._v("All changes specified below apply to all protocol/versions retroactively.")]),e._v(" "),a("h3",{attrs:{id:"definitions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#definitions"}},[e._v("#")]),e._v(" Definitions")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("||")]),e._v(" is the byte/byte-array concatenation operator.")]),e._v(" "),a("li",[a("code",[e._v("|")]),e._v(" is the type union operator.")]),e._v(" "),a("li",[a("code",[e._v("DEVP2P_VERSION = TBD")])]),e._v(" "),a("li",[a("code",[e._v("Transaction")]),e._v(" is either "),a("code",[e._v("TypedTransaction")]),e._v(" or "),a("code",[e._v("LegacyTransaction")])]),e._v(" "),a("li",[a("code",[e._v("TypedTransaction")]),e._v(" is a byte array containing "),a("code",[e._v("TransactionType || TransactionPayload")])]),e._v(" "),a("li",[a("code",[e._v("TypedTransactionHash")]),e._v(" is "),a("code",[e._v("keccak256(TypedTransaction)")])]),e._v(" "),a("li",[a("code",[e._v("TransactionType")]),e._v(" is a positive unsigned 8-bit number between "),a("code",[e._v("0")]),e._v(" and "),a("code",[e._v("0x7f")]),e._v(" that represents the type of the transcation")]),e._v(" "),a("li",[a("code",[e._v("TransactionPayload")]),e._v(" is an opaque byte array whose interpretation is dependent on the "),a("code",[e._v("TransactionType")]),e._v(" and defined in future EIPs")]),e._v(" "),a("li",[a("code",[e._v("LegacyTransaction")]),e._v(" is an array of the form "),a("code",[e._v("[nonce, gasPrice, gasLimit, to, value, data, v, r, s]")])]),e._v(" "),a("li",[a("code",[e._v("LegacyTransactionHash")]),e._v(" is "),a("code",[e._v("keccak256(rlp(LegacyTransaction))")])]),e._v(" "),a("li",[a("code",[e._v("TransactionId")]),e._v(" is "),a("code",[e._v("keccak256(TypedTransactionHash | LegacyTransactionHash)")])]),e._v(" "),a("li",[a("code",[e._v("Receipt")]),e._v(" is either "),a("code",[e._v("TypedReceipt")]),e._v(" or "),a("code",[e._v("LegacyReceipt")])]),e._v(" "),a("li",[a("code",[e._v("TypedReceipt")]),e._v(" is a byte array containing "),a("code",[e._v("TransactionType || ReceiptPayload")])]),e._v(" "),a("li",[a("code",[e._v("ReceiptPayload")]),e._v(" is an opaque byte array whose interpretation is dependent on the "),a("code",[e._v("TransactionType")]),e._v(" and defined in future EIPs")]),e._v(" "),a("li",[a("code",[e._v("LegacyReceipt")]),e._v(" is an array of the form "),a("code",[e._v("[status, cumulativeGasUsed, logsBloom, logs]")])]),e._v(" "),a("li",[a("code",[e._v("LegacyReceiptHash")]),e._v(" is "),a("code",[e._v("keccak256(rlp(LegacyReceipt))")])])]),e._v(" "),a("h3",{attrs:{id:"protocol-behavior"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#protocol-behavior"}},[e._v("#")]),e._v(" Protocol Behavior")]),e._v(" "),a("p",[e._v("If a client receives a "),a("code",[e._v("TransactionType")]),e._v(" it doesn't recognize via any message, it "),a("strong",[e._v("SHOULD")]),e._v(" disconnect the peer that sent it.")]),e._v(" "),a("p",[e._v("If a client receives a "),a("code",[e._v("TransactionPayload")]),e._v(" that isn't valid for the "),a("code",[e._v("TransactionType")]),e._v(", it "),a("strong",[e._v("SHOULD")]),e._v(" disconnect the peer that sent it.")]),e._v(" "),a("p",[e._v("Clients "),a("strong",[e._v("MUST NOT")]),e._v(" send transactions of a new "),a("code",[e._v("TransactionType")]),e._v(" until that transaction type's introductory fork block.")]),e._v(" "),a("p",[e._v("Clients "),a("strong",[e._v("MAY")]),e._v(" disconnect peers who send transactions of a new "),a("code",[e._v("TransactionType")]),e._v(" significantly before that transaction type's introductory fork block.")]),e._v(" "),a("h3",{attrs:{id:"protocol-messages"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#protocol-messages"}},[e._v("#")]),e._v(" Protocol Messages")]),e._v(" "),a("p",[a("code",[e._v("Transactions (0x02)")]),e._v(": "),a("code",[e._v("[Transaction_0, Transaction_1, ..., Transaction_n]")])]),e._v(" "),a("p",[a("code",[e._v("BlockBodies (0x06)")]),e._v(": "),a("code",[e._v("[BlockBody_0, BlockBody_1, ..., BlockBody_n]")]),e._v(" where:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("BlockBody")]),e._v(" is "),a("code",[e._v("[TransactionList, UncleList]")])]),e._v(" "),a("li",[a("code",[e._v("TransactionList")]),e._v(" is "),a("code",[e._v("[Transaction_0, Transaction_1, ..., Transaction_n]")])]),e._v(" "),a("li",[a("code",[e._v("UnclesList")]),e._v(" is defined in previous versions of the devp2p specification")])]),e._v(" "),a("p",[a("code",[e._v("NewBlock (0x07)")]),e._v(": "),a("code",[e._v("[[BlockHeader, TransactionList, UncleList], TotalDifficulty]")]),e._v(" where:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("BlockHeader")]),e._v(" is defined in previous versions of the devp2 specification")]),e._v(" "),a("li",[a("code",[e._v("TransactionList")]),e._v(" is "),a("code",[e._v("[Transaction_0, Transaction_1, ..., Transaction_n]")])]),e._v(" "),a("li",[a("code",[e._v("UnclesList")]),e._v(" is defined in previous versions of the devp2p specification")]),e._v(" "),a("li",[a("code",[e._v("TotalDifficulty")]),e._v(" is defined in previous versions of the devp2p specification")])]),e._v(" "),a("p",[a("code",[e._v("NewPooledTransactionIds (0x08)")]),e._v(": "),a("code",[e._v("[TransactionId_0, TransactionId_1, ..., TransactionId_n]")])]),e._v(" "),a("p",[a("code",[e._v("GetPooledTransactions (0x09)")]),e._v(": "),a("code",[e._v("[TransactionId_0, TransactionId_1, ..., TransactionId_n]")])]),e._v(" "),a("p",[a("code",[e._v("PooledTransactions (0x0a)")]),e._v(": "),a("code",[e._v("[Transaction_0, Transaction_1, ..., Transaction_n]")])]),e._v(" "),a("p",[a("code",[e._v("Receipts (0x10)")]),e._v(": "),a("code",[e._v("[ReceiptList_0, ReceiptList_1, ..., ReceiptList_n]")]),e._v(" where:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ReceiptList")]),e._v(" is "),a("code",[e._v("[Receipt_0, Receipt_1, ..., Receipt_n]")])])]),e._v(" "),a("h2",{attrs:{id:"rationale"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rationale"}},[e._v("#")]),e._v(" Rationale")]),e._v(" "),a("h3",{attrs:{id:"why-not-specify-each-transaction-type-at-the-protocol-layer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#why-not-specify-each-transaction-type-at-the-protocol-layer"}},[e._v("#")]),e._v(" Why not specify each transaction type at the protocol layer?")]),e._v(" "),a("p",[e._v("We could have chosen to make the protocol aware of the shape of the transaction payloads.\nThe authors felt that it would be too much maintenance burden long term to have every new transaction type require an update to devp2p, so instead we merely define that typed transactions are supported.")]),e._v(" "),a("h3",{attrs:{id:"why-have-peers-disconnect-if-they-receive-an-unknown-transaction-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#why-have-peers-disconnect-if-they-receive-an-unknown-transaction-type"}},[e._v("#")]),e._v(" Why have peers disconnect if they receive an unknown transaction type?")]),e._v(" "),a("p",[e._v("We could encourage peers to remain connected to peers that submit an unknown transaction type, in case the transaction is some new transaction type that the receiver isn't aware of it.\nHowever, doing so may open clients up to DoS attacks where someone would send them transactions of an undefined "),a("code",[e._v("TransactionType")]),e._v(" in order to avoid being disconnected for spamming.\nAlso, in most cases we expect that by the time new transaction types are being sent over devp2p, a hard fork that requires all connected clients to be aware of the new transaction type is almost certainly imminent.")]),e._v(" "),a("h2",{attrs:{id:"backwards-compatibility"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#backwards-compatibility"}},[e._v("#")]),e._v(" Backwards Compatibility")]),e._v(" "),a("p",[e._v("Legacy transactions are still supported.")]),e._v(" "),a("h2",{attrs:{id:"security-considerations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#security-considerations"}},[e._v("#")]),e._v(" Security Considerations")]),e._v(" "),a("p",[e._v("If a client chooses to ignore the "),a("strong",[e._v("SHOULD")]),e._v(" recommendation for disconnecting peers that send unknown transaction types they may be susceptible to DoS attacks.\nIgnoring this recommendation should be limited to trusted peers only, or other situations where the risk of DoS is extremely low.")]),e._v(" "),a("h2",{attrs:{id:"copyright"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),a("p",[e._v("Copyright and related rights waived via "),a("a",{attrs:{href:"https://creativecommons.org/publicdomain/zero/1.0/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CC0"),a("OutboundLink")],1),e._v(".")])])}),[],!1,null,null,null);t.default=n.exports}}]);