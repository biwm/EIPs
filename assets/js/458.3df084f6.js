(window.webpackJsonp=window.webpackJsonp||[]).push([[458],{865:function(t,e,a){"use strict";a.r(e);var o=a(46),s=Object(o.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"simple-summary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#simple-summary"}},[t._v("#")]),t._v(" Simple Summary")]),t._v(" "),a("p",[t._v("This EIP creates a specific opcode named "),a("code",[t._v("PRECOMPILEDCALL")]),t._v(" to call Precompiled contracts without the costs of a normal "),a("code",[t._v("CALL")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"abstract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[t._v("#")]),t._v(" Abstract")]),t._v(" "),a("p",[t._v("This EIP tries to resolve the problem of high gas consumption when calling precompiled contracts with a small gas cost. Using this opcode for calling precompiled contracts allows to define precompiled contracts whose effective cost it is less than 700.")]),t._v(" "),a("h2",{attrs:{id:"motivation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[t._v("#")]),t._v(" Motivation")]),t._v(" "),a("p",[t._v("Each precompiled contract has an already defined cost for calling it. It does not make sense to add the implicit extra gas cost of the CALL opcode.")]),t._v(" "),a("p",[t._v("As an example, SHA256 precompiled contract costs 60 and ECADD costs 500 (proposed to costs only 50 in "),a("RouterLink",{attrs:{to:"/zh/eip-1108.html"}},[t._v("EIP-1108")]),t._v(" . When a precompiled contract is called, 700 gas is consumed just for the CALL opcode besides the costs of the precompiled contract.")],1),t._v(" "),a("p",[t._v("This makes no sense, and right now it's impossible to define a precompiled contract whose effective cost for using it, is less than 700.")]),t._v(" "),a("h2",{attrs:{id:"specification"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[t._v("#")]),t._v(" Specification")]),t._v(" "),a("p",[t._v("If "),a("code",[t._v("block.number >= XXXXX")]),t._v(", define a new opcode named "),a("code",[t._v("PRECOMPILEDCALL")]),t._v(" with code value "),a("code",[t._v("0xfb")]),t._v(".")]),t._v(" "),a("p",[t._v("The gas cost of the OPCODE is 2 (Gbase) plus the Specific gas cost defined for each specific precompiled smart contract.")]),t._v(" "),a("p",[t._v("The OPCODE takes 5 words from the stack and returns 1 word to the stack.")]),t._v(" "),a("p",[t._v("The input stack values are:")]),t._v(" "),a("p",[t._v("mu_s[0] = The address of the precompiled smart contract that is called. mu_s[1] = Pointer to memory for the input parameters. mu_s[2] = Length of the input parameters in bytes. mu_s[3] = Pointer to memory where the output is stored mu_s[4] = Length of the output buffer.")]),t._v(" "),a("p",[t._v("The return will be 1 in case of success call and 0 in any of the next cases:")]),t._v(" "),a("p",[t._v("1.- mu_s[0] is an address of an undefined precompiled smart contract. 2.- The precompiled smart contract fails (as defined on each smart contract). Invalid input parameters for example.")]),t._v(" "),a("p",[t._v("Precompiled smart contracs, does not execute opcodes, so there is no need to pass a gas parameter as a normal "),a("code",[t._v("CALL")]),t._v(" ("),a("code",[t._v("0xf1")]),t._v(').  If the available gas is less that 2 plus the required gas required for the specific precompiled smart cotract, the context just STOPS executing with an "Out of Gas" error.')]),t._v(" "),a("p",[t._v("There is no stack check for this call.")]),t._v(" "),a("p",[t._v("The normal "),a("code",[t._v("CALL")]),t._v("s to the precompiled smart contracts continue to work with the exact same behavior.")]),t._v(" "),a("p",[t._v("A "),a("code",[t._v("PRECOMPILEDCALL")]),t._v(' to a regular address or regular smart contract, is considered a call to an "undefined smart contract", so the VM MUST not execute it and the opcode must return 0x0 .')]),t._v(" "),a("h2",{attrs:{id:"rationale"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rationale"}},[t._v("#")]),t._v(" Rationale")]),t._v(" "),a("p",[t._v("There was a first proposal for removing the gast consts for the "),a("code",[t._v("CALL")]),t._v(", but it looks that it's easier to implement and test a new opcode just for that.")]),t._v(" "),a("p",[t._v("The code is just the next opcode available after the "),a("code",[t._v("STATICCALL")]),t._v(" opcode.")]),t._v(" "),a("h2",{attrs:{id:"backwards-compatibility"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#backwards-compatibility"}},[t._v("#")]),t._v(" Backwards Compatibility")]),t._v(" "),a("p",[t._v("This EIP is backwards compatible.  Smart contracts that call precompiled contracts using this new opcode will cost less from now on.")]),t._v(" "),a("p",[t._v("Old contracts that call precompiled smart contracts with the "),a("code",[t._v("CALL")]),t._v(" method, will continue working.")]),t._v(" "),a("h2",{attrs:{id:"test-cases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#test-cases"}},[t._v("#")]),t._v(" Test Cases")]),t._v(" "),a("ul",[a("li",[t._v("Normal call to a defined precompiled contract.")]),t._v(" "),a("li",[t._v("Call to undefined precompiled contract.")]),t._v(" "),a("li",[t._v("Call to a regular contract")]),t._v(" "),a("li",[t._v("Call to a regular account")]),t._v(" "),a("li",[t._v("Call to 0x0 smart contract (Does not exists).")]),t._v(" "),a("li",[t._v("Call with large values for the offste pointers and lengths")]),t._v(" "),a("li",[t._v("Call with the exact gas remaining needed to call smart contract.")]),t._v(" "),a("li",[t._v("Call with the exact gas remaining minus one needed to call smart contract.")])]),t._v(" "),a("h2",{attrs:{id:"implementation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implementation"}},[t._v("#")]),t._v(" Implementation")]),t._v(" "),a("p",[t._v("Not implemented yet.")]),t._v(" "),a("h2",{attrs:{id:"copyright"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[t._v("#")]),t._v(" Copyright")]),t._v(" "),a("p",[t._v("Copyright and related rights waived via "),a("a",{attrs:{href:"https://creativecommons.org/publicdomain/zero/1.0/",target:"_blank",rel:"noopener noreferrer"}},[t._v("CC0"),a("OutboundLink")],1),t._v(".")])])}),[],!1,null,null,null);e.default=s.exports}}]);