(window.webpackJsonp=window.webpackJsonp||[]).push([[639],{1070:function(e,t,i){"use strict";i.r(t);var a=i(46),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h2",{attrs:{id:"simple-summary"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#simple-summary"}},[e._v("#")]),e._v(" Simple Summary")]),e._v(" "),i("p",[e._v("This precompile adds operation on BLS12-377 curve (from Zexe paper) as a precompile in a set necessary to "),i("em",[e._v("efficiently")]),e._v(" perform operations such as BLS signature verification and perform SNARKs verifications. Unique properties of BLS12-377 also later allow to have SNARKs that check BLS12-377 pairing in an efficient way and allow e.g. constant-size BLS signature aggregation.")]),e._v(" "),i("h2",{attrs:{id:"abstract"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),i("p",[e._v("If "),i("code",[e._v("block.number >= X")]),e._v(" we introduce "),i("em",[e._v("nine")]),e._v(" separate precompiles to perform the following operations:")]),e._v(" "),i("ul",[i("li",[e._v("BLS12_377_G1ADD - to perform point addition on a curve defined over prime field")]),e._v(" "),i("li",[e._v("BLS12_377_G1MUL - to perform point multiplication on a curve defined over prime field")]),e._v(" "),i("li",[e._v("BLS12_377_G1MULTIEXP - to perform multiexponentiation on a curve defined over prime field")]),e._v(" "),i("li",[e._v("BLS12_377_G2ADD - to perform point addition on a curve twist defined over quadratic extension of the base field")]),e._v(" "),i("li",[e._v("BLS12_377_G2MUL - to perform point multiplication on a curve twist defined over quadratic extension of the base field")]),e._v(" "),i("li",[e._v("BLS12_377_G2MULTIEXP - to perform multiexponentiation on a curve twist defined over quadratic extension of the base field")]),e._v(" "),i("li",[e._v("BLS12_377_PAIRING - to perform a pairing operations between a set of "),i("em",[e._v("pairs")]),e._v(" of (G1, G2) points")])]),e._v(" "),i("p",[e._v("Multiexponentiation operation is included to efficiently aggregate public keys or individual signer's signatures during BLS signature verification.")]),e._v(" "),i("h3",{attrs:{id:"proposed-addresses-table"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#proposed-addresses-table"}},[e._v("#")]),e._v(" Proposed addresses table")]),e._v(" "),i("table",[i("thead",[i("tr",[i("th",[e._v("Precompile")]),e._v(" "),i("th",[e._v("Address")])])]),e._v(" "),i("tbody",[i("tr",[i("td",[e._v("BLS12_377_G1ADD")]),e._v(" "),i("td",[e._v("0x13")])]),e._v(" "),i("tr",[i("td",[e._v("BLS12_377_G1MUL")]),e._v(" "),i("td",[e._v("0x14")])]),e._v(" "),i("tr",[i("td",[e._v("BLS12_377_G1MULTIEXP")]),e._v(" "),i("td",[e._v("0x15")])]),e._v(" "),i("tr",[i("td",[e._v("BLS12_377_G2ADD")]),e._v(" "),i("td",[e._v("0x16")])]),e._v(" "),i("tr",[i("td",[e._v("BLS12_377_G2MUL")]),e._v(" "),i("td",[e._v("0x17")])]),e._v(" "),i("tr",[i("td",[e._v("BLS12_377_G2MULTIEXP")]),e._v(" "),i("td",[e._v("0x18")])]),e._v(" "),i("tr",[i("td",[e._v("BLS12_377_PAIRING")]),e._v(" "),i("td",[e._v("0x19")])])])]),e._v(" "),i("h2",{attrs:{id:"motivation"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),i("p",[e._v("Motivation of this precompile is to add a cryptographic primitive that allows to get 120+ bits of security for operations over pairing friendly curve compared to the existing BN254 precompile that only provides 80 bits of security. In addition it allows efficient one-time recursive proof aggregations, e.g. proofs about existence of BLS12-377 based signature.")]),e._v(" "),i("h2",{attrs:{id:"specification"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),i("p",[e._v("Curve parameters:")]),e._v(" "),i("p",[e._v("BLS12-377 curve is fully defined by the following set of parameters (coefficient "),i("code",[e._v("A=0")]),e._v(" for all BLS12 curves):")]),e._v(" "),i("div",{staticClass:"language- line-numbers-mode"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v("Base field modulus = 0x01ae3a4617c510eac63b05c06ca1493b1a22d9f300f5138f1ef3622fba094800170b5d44300000008508c00000000001\nB coefficient = 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\nMain subgroup order = 0x12ab655e9a2ca55660b44d1e5c37b00159aa76fed00000010a11800000000001\nExtension tower:\nFp2 construction:\nFp quadratic non-residue = 0x01ae3a4617c510eac63b05c06ca1493b1a22d9f300f5138f1ef3622fba094800170b5d44300000008508bffffffffffc\nFp6/Fp12 construction:\nFp2 cubic non-residue c0 = 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nFp2 cubic non-residue c1 = 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\nTwist parameters:\nTwist type: D\nB coefficient for twist c0 = 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nB coefficient for twist c1 = 0x010222f6db0fd6f343bd03737460c589dc7b4f91cd5fd889129207b63c6bf8000dd39e5c1ccccccd1c9ed9999999999a\nGenerators:\nG1:\nX = 0x008848defe740a67c8fc6225bf87ff5485951e2caa9d41bb188282c8bd37cb5cd5481512ffcd394eeab9b16eb21be9ef\nY = 0x01914a69c5102eff1f674f5d30afeec4bd7fb348ca3e52d96d182ad44fb82305c2fe3d3634a9591afd82de55559c8ea6\nG2:\nX c0 = 0x018480be71c785fec89630a2a3841d01c565f071203e50317ea501f557db6b9b71889f52bb53540274e3e48f7c005196\nX c1 = 0x00ea6040e700403170dc5a51b1b140d5532777ee6651cecbe7223ece0799c9de5cf89984bff76fe6b26bfefa6ea16afe\nY c0 = 0x00690d665d446f7bd960736bcbb2efb4de03ed7274b49a58e458c282f832d204f2cf88886d8c7c2ef094094409fd4ddf\nY c1 = 0x00f8169fd28355189e549da3151a70aa61ef11ac3d591bf12463b01acee304c24279b83f5e52270bd9a1cdd185eb8f93\nPairing parameters:\n|x| (miller loop scalar) = 0x8508c00000000001\nx is negative = false\n")])]),e._v(" "),i("div",{staticClass:"line-numbers-wrapper"},[i("span",{staticClass:"line-number"},[e._v("1")]),i("br"),i("span",{staticClass:"line-number"},[e._v("2")]),i("br"),i("span",{staticClass:"line-number"},[e._v("3")]),i("br"),i("span",{staticClass:"line-number"},[e._v("4")]),i("br"),i("span",{staticClass:"line-number"},[e._v("5")]),i("br"),i("span",{staticClass:"line-number"},[e._v("6")]),i("br"),i("span",{staticClass:"line-number"},[e._v("7")]),i("br"),i("span",{staticClass:"line-number"},[e._v("8")]),i("br"),i("span",{staticClass:"line-number"},[e._v("9")]),i("br"),i("span",{staticClass:"line-number"},[e._v("10")]),i("br"),i("span",{staticClass:"line-number"},[e._v("11")]),i("br"),i("span",{staticClass:"line-number"},[e._v("12")]),i("br"),i("span",{staticClass:"line-number"},[e._v("13")]),i("br"),i("span",{staticClass:"line-number"},[e._v("14")]),i("br"),i("span",{staticClass:"line-number"},[e._v("15")]),i("br"),i("span",{staticClass:"line-number"},[e._v("16")]),i("br"),i("span",{staticClass:"line-number"},[e._v("17")]),i("br"),i("span",{staticClass:"line-number"},[e._v("18")]),i("br"),i("span",{staticClass:"line-number"},[e._v("19")]),i("br"),i("span",{staticClass:"line-number"},[e._v("20")]),i("br"),i("span",{staticClass:"line-number"},[e._v("21")]),i("br"),i("span",{staticClass:"line-number"},[e._v("22")]),i("br"),i("span",{staticClass:"line-number"},[e._v("23")]),i("br"),i("span",{staticClass:"line-number"},[e._v("24")]),i("br"),i("span",{staticClass:"line-number"},[e._v("25")]),i("br")])]),i("h4",{attrs:{id:"fine-points-and-encoding-of-base-elements"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#fine-points-and-encoding-of-base-elements"}},[e._v("#")]),e._v(" Fine points and encoding of base elements")]),e._v(" "),i("h5",{attrs:{id:"field-elements-encoding"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#field-elements-encoding"}},[e._v("#")]),e._v(" Field elements encoding:")]),e._v(" "),i("p",[e._v("To encode points involved in the operation one has to encode elements of the base field and the extension field.")]),e._v(" "),i("p",[e._v("Base field element (Fp) is encoded as "),i("code",[e._v("64")]),e._v(" bytes by performing BigEndian encoding of the corresponding (unsigned) integer (top "),i("code",[e._v("16")]),e._v(" bytes are always zeroes). "),i("code",[e._v("64")]),e._v(" bytes are chosen to have "),i("code",[e._v("32")]),e._v(" byte aligned ABI (representable as e.g. "),i("code",[e._v("bytes32[2]")]),e._v(" or "),i("code",[e._v("uint256[2]")]),e._v("). Corresponding integer "),i("strong",[e._v("must")]),e._v(" be less than field modulus.")]),e._v(" "),i("p",[e._v("For elements of the quadratic extension field (Fp2) encoding is byte concatenation of individual encoding of the coefficients totaling in "),i("code",[e._v("128")]),e._v(" bytes for a total encoding. For an Fp2 element in a form "),i("code",[e._v("el = c0 + c1 * v")]),e._v(" where "),i("code",[e._v("v")]),e._v(" is formal quadratic non-residue and "),i("code",[e._v("c0")]),e._v(" and "),i("code",[e._v("c1")]),e._v(" are Fp elements the corresponding byte encoding will be "),i("code",[e._v("encode(c0) || encode(c1)")]),e._v(" where "),i("code",[e._v("||")]),e._v(" means byte concatenation (or one can use "),i("code",[e._v("bytes32[4]")]),e._v(" or "),i("code",[e._v("uint256[4]")]),e._v(" in terms of Solidity types).")]),e._v(" "),i("p",[e._v("If encodings do not follow this spec anywhere during parsing in the precompile the precompile "),i("em",[e._v("must")]),e._v(" return an error.")]),e._v(" "),i("h5",{attrs:{id:"encoding-of-points-in-g1-g2"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#encoding-of-points-in-g1-g2"}},[e._v("#")]),e._v(" Encoding of points in G1/G2:")]),e._v(" "),i("p",[e._v("Points in either G1 (in base field) or in G2 (in extension field) are encoded as byte concatenation of encodings of the "),i("code",[e._v("x")]),e._v(" and "),i("code",[e._v("y")]),e._v(" affine coordinates. Total encoding length for G1 point is thus "),i("code",[e._v("128")]),e._v(" bytes and for G2 point is "),i("code",[e._v("256")]),e._v(" bytes.")]),e._v(" "),i("h5",{attrs:{id:"point-of-infinity-encoding"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#point-of-infinity-encoding"}},[e._v("#")]),e._v(" Point of infinity encoding:")]),e._v(" "),i("p",[e._v('Also referred as "zero point". For BLS12 curves point with coordinates '),i("code",[e._v("(0, 0)")]),e._v(" (formal zeroes in Fp or Fp2) is "),i("em",[e._v("not")]),e._v(" on the curve, so encoding of such point "),i("code",[e._v("(0, 0)")]),e._v(" is used as a convention to encode point of infinity.")]),e._v(" "),i("h5",{attrs:{id:"encoding-of-scalars-for-multiplication-operation"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#encoding-of-scalars-for-multiplication-operation"}},[e._v("#")]),e._v(" Encoding of scalars for multiplication operation:")]),e._v(" "),i("p",[e._v("Scalar for multiplication operation is encoded as "),i("code",[e._v("32")]),e._v(" bytes by performing BigEndian encoding of the corresponding (unsigned) integer. Corresponding integer is "),i("strong",[e._v("not")]),e._v(" required to be less than or equal than main subgroup size.")]),e._v(" "),i("h4",{attrs:{id:"abi-for-operations"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#abi-for-operations"}},[e._v("#")]),e._v(" ABI for operations")]),e._v(" "),i("h5",{attrs:{id:"abi-for-g1-addition"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#abi-for-g1-addition"}},[e._v("#")]),e._v(" ABI for G1 addition")]),e._v(" "),i("p",[e._v("G1 addition call expects "),i("code",[e._v("256")]),e._v(" bytes as an input that is interpreted as byte concatenation of two G1 points ("),i("code",[e._v("128")]),e._v(" bytes each). Output is an encoding of addition operation result - single G1 point ("),i("code",[e._v("128")]),e._v(" bytes).")]),e._v(" "),i("p",[e._v("Error cases:")]),e._v(" "),i("ul",[i("li",[e._v("Either of points being not on the curve must result in error")]),e._v(" "),i("li",[e._v("Field elements encoding rules apply (obviously)")]),e._v(" "),i("li",[e._v("Input has invalid length")])]),e._v(" "),i("h5",{attrs:{id:"abi-for-g1-multiplication"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#abi-for-g1-multiplication"}},[e._v("#")]),e._v(" ABI for G1 multiplication")]),e._v(" "),i("p",[e._v("G1 multiplication call expects "),i("code",[e._v("160")]),e._v(" bytes as an input that is interpreted as byte concatenation of encoding of G1 point ("),i("code",[e._v("128")]),e._v(" bytes) and encoding of a scalar value ("),i("code",[e._v("32")]),e._v(" bytes). Output is an encoding of multiplication operation result - single G1 point ("),i("code",[e._v("128")]),e._v(" bytes).")]),e._v(" "),i("p",[e._v("Error cases:")]),e._v(" "),i("ul",[i("li",[e._v("Point being not on the curve must result in error")]),e._v(" "),i("li",[e._v("Field elements encoding rules apply (obviously)")]),e._v(" "),i("li",[e._v("Input has invalid length")])]),e._v(" "),i("h5",{attrs:{id:"abi-for-g1-multiexponentiation"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#abi-for-g1-multiexponentiation"}},[e._v("#")]),e._v(" ABI for G1 multiexponentiation")]),e._v(" "),i("p",[e._v("G1 multiexponentiation call expects "),i("code",[e._v("160*k")]),e._v(" bytes as an input that is interpreted as byte concatenation of "),i("code",[e._v("k")]),e._v(" slices each of them being a byte concatenation of encoding of G1 point ("),i("code",[e._v("128")]),e._v(" bytes) and encoding of a scalar value ("),i("code",[e._v("32")]),e._v(" bytes). Output is an encoding of multiexponentiation operation result - single G1 point ("),i("code",[e._v("128")]),e._v(" bytes).")]),e._v(" "),i("p",[e._v("Error cases:")]),e._v(" "),i("ul",[i("li",[e._v("Any of G1 points being not on the curve must result in error")]),e._v(" "),i("li",[e._v("Field elements encoding rules apply (obviously)")]),e._v(" "),i("li",[e._v("Input has invalid length")])]),e._v(" "),i("h5",{attrs:{id:"abi-for-g2-addition"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#abi-for-g2-addition"}},[e._v("#")]),e._v(" ABI for G2 addition")]),e._v(" "),i("p",[e._v("G2 addition call expects "),i("code",[e._v("512")]),e._v(" bytes as an input that is interpreted as byte concatenation of two G2 points ("),i("code",[e._v("256")]),e._v(" bytes each). Output is an encoding of addition operation result - single G2 point ("),i("code",[e._v("256")]),e._v(" bytes).")]),e._v(" "),i("p",[e._v("Error cases:")]),e._v(" "),i("ul",[i("li",[e._v("Either of points being not on the curve must result in error")]),e._v(" "),i("li",[e._v("Field elements encoding rules apply (obviously)")]),e._v(" "),i("li",[e._v("Input has invalid length")])]),e._v(" "),i("h5",{attrs:{id:"abi-for-g2-multiplication"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#abi-for-g2-multiplication"}},[e._v("#")]),e._v(" ABI for G2 multiplication")]),e._v(" "),i("p",[e._v("G2 multiplication call expects "),i("code",[e._v("288")]),e._v(" bytes as an input that is interpreted as byte concatenation of encoding of G2 point ("),i("code",[e._v("256")]),e._v(" bytes) and encoding of a scalar value ("),i("code",[e._v("32")]),e._v(" bytes). Output is an encoding of multiplication operation result - single G2 point ("),i("code",[e._v("256")]),e._v(" bytes).")]),e._v(" "),i("p",[e._v("Error cases:")]),e._v(" "),i("ul",[i("li",[e._v("Point being not on the curve must result in error")]),e._v(" "),i("li",[e._v("Field elements encoding rules apply (obviously)")]),e._v(" "),i("li",[e._v("Input has invalid length")])]),e._v(" "),i("h5",{attrs:{id:"abi-for-g2-multiexponentiation"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#abi-for-g2-multiexponentiation"}},[e._v("#")]),e._v(" ABI for G2 multiexponentiation")]),e._v(" "),i("p",[e._v("G2 multiexponentiation call expects "),i("code",[e._v("288*k")]),e._v(" bytes as an input that is interpreted as byte concatenation of "),i("code",[e._v("k")]),e._v(" slices each of them being a byte concatenation of encoding of G2 point ("),i("code",[e._v("256")]),e._v(" bytes) and encoding of a scalar value ("),i("code",[e._v("32")]),e._v(" bytes). Output is an encoding of multiexponentiation operation result - single G2 point ("),i("code",[e._v("256")]),e._v(" bytes).")]),e._v(" "),i("p",[e._v("Error cases:")]),e._v(" "),i("ul",[i("li",[e._v("Any of G2 points being not on the curve must result in error")]),e._v(" "),i("li",[e._v("Field elements encoding rules apply (obviously)")]),e._v(" "),i("li",[e._v("Input has invalid length")])]),e._v(" "),i("h5",{attrs:{id:"abi-for-pairing"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#abi-for-pairing"}},[e._v("#")]),e._v(" ABI for pairing")]),e._v(" "),i("p",[e._v("Pairing call expects "),i("code",[e._v("384*k")]),e._v(" bytes as an inputs that is interpreted as byte concatenation of "),i("code",[e._v("k")]),e._v(" slices. Each slice has the following structure:")]),e._v(" "),i("ul",[i("li",[i("code",[e._v("128")]),e._v(" bytes of G1 point encoding")]),e._v(" "),i("li",[i("code",[e._v("256")]),e._v(" bytes of G2 point encoding")])]),e._v(" "),i("p",[e._v("Output is a "),i("code",[e._v("32")]),e._v(" bytes where first "),i("code",[e._v("31")]),e._v(" bytes are equal to "),i("code",[e._v("0x00")]),e._v(" and the last byte is "),i("code",[e._v("0x01")]),e._v(" if pairing result is equal to multiplicative identity in a pairing target field and "),i("code",[e._v("0x00")]),e._v(" otherwise.")]),e._v(" "),i("p",[e._v("Error cases:")]),e._v(" "),i("ul",[i("li",[e._v("Invalid encoding of any boolean variable must result in error")]),e._v(" "),i("li",[e._v("Any of G1 or G2 points being not on the curve must result in error")]),e._v(" "),i("li",[e._v("Any of G1 or G2 points are not in the correct subgroup")]),e._v(" "),i("li",[e._v("Field elements encoding rules apply (obviously)")]),e._v(" "),i("li",[e._v("Input has invalid length")])]),e._v(" "),i("h4",{attrs:{id:"prevention-of-ddos-on-error-handling"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#prevention-of-ddos-on-error-handling"}},[e._v("#")]),e._v(" Prevention of DDoS on error handling")]),e._v(" "),i("p",[e._v("This precompile performs extensive computations and in case of any errors during execution it MUST consume all gas from the the gas schedule for the corresponding operation.")]),e._v(" "),i("h4",{attrs:{id:"gas-schedule"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#gas-schedule"}},[e._v("#")]),e._v(" Gas schedule")]),e._v(" "),i("p",[e._v("Assuming a constant "),i("code",[e._v("30 MGas/second")]),e._v(" following prices are suggested.")]),e._v(" "),i("h5",{attrs:{id:"g1-addition"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#g1-addition"}},[e._v("#")]),e._v(" G1 addition")]),e._v(" "),i("p",[i("code",[e._v("600")]),e._v(" gas")]),e._v(" "),i("h5",{attrs:{id:"g1-multiplication"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#g1-multiplication"}},[e._v("#")]),e._v(" G1 multiplication")]),e._v(" "),i("p",[i("code",[e._v("12000")]),e._v(" gas")]),e._v(" "),i("h5",{attrs:{id:"g2-addition"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#g2-addition"}},[e._v("#")]),e._v(" G2 addition")]),e._v(" "),i("p",[i("code",[e._v("4500")]),e._v(" gas")]),e._v(" "),i("h5",{attrs:{id:"g2-multiplication"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#g2-multiplication"}},[e._v("#")]),e._v(" G2 multiplication")]),e._v(" "),i("p",[i("code",[e._v("55000")]),e._v(" gas")]),e._v(" "),i("h5",{attrs:{id:"g1-g2-multiexponentiation"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#g1-g2-multiexponentiation"}},[e._v("#")]),e._v(" G1/G2 Multiexponentiation")]),e._v(" "),i("p",[e._v("Multiexponentiations are expected to be performed by the Peppinger algorithm (we can also say that is "),i("strong",[e._v("must")]),e._v(" be performed by Peppinger algorithm to have a speedup that results in a discount over naive implementation by multiplying each pair separately and adding the results). For this case there was a table prepared for discount in case of "),i("code",[e._v("k <= 128")]),e._v(" points in the multiexponentiation with a discount cup "),i("code",[e._v("max_discount")]),e._v(" for "),i("code",[e._v("k > 128")]),e._v(".")]),e._v(" "),i("p",[e._v("To avoid non-integer arithmetic call cost is calculated as "),i("code",[e._v("k * multiplication_cost * discount / multiplier")]),e._v(" where "),i("code",[e._v("multiplier = 1000")]),e._v(", "),i("code",[e._v("k")]),e._v(" is a number of (scalar, point) pairs for the call, "),i("code",[e._v("multiplication_cost")]),e._v(" is a corresponding single multiplication call cost for G1/G2.")]),e._v(" "),i("p",[e._v("Discounts table as a vector of pairs "),i("code",[e._v("[k, discount]")]),e._v(":")]),e._v(" "),i("div",{staticClass:"language- line-numbers-mode"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v("[[1, 1200], [2, 888], [3, 764], [4, 641], [5, 594], [6, 547], [7, 500], [8, 453], [9, 438], [10, 423], [11, 408], [12, 394], [13, 379], [14, 364], [15, 349], [16, 334], [17, 330], [18, 326], [19, 322], [20, 318], [21, 314], [22, 310], [23, 306], [24, 302], [25, 298], [26, 294], [27, 289], [28, 285], [29, 281], [30, 277], [31, 273], [32, 269], [33, 268], [34, 266], [35, 265], [36, 263], [37, 262], [38, 260], [39, 259], [40, 257], [41, 256], [42, 254], [43, 253], [44, 251], [45, 250], [46, 248], [47, 247], [48, 245], [49, 244], [50, 242], [51, 241], [52, 239], [53, 238], [54, 236], [55, 235], [56, 233], [57, 232], [58, 231], [59, 229], [60, 228], [61, 226], [62, 225], [63, 223], [64, 222], [65, 221], [66, 220], [67, 219], [68, 219], [69, 218], [70, 217], [71, 216], [72, 216], [73, 215], [74, 214], [75, 213], [76, 213], [77, 212], [78, 211], [79, 211], [80, 210], [81, 209], [82, 208], [83, 208], [84, 207], [85, 206], [86, 205], [87, 205], [88, 204], [89, 203], [90, 202], [91, 202], [92, 201], [93, 200], [94, 199], [95, 199], [96, 198], [97, 197], [98, 196], [99, 196], [100, 195], [101, 194], [102, 193], [103, 193], [104, 192], [105, 191], [106, 191], [107, 190], [108, 189], [109, 188], [110, 188], [111, 187], [112, 186], [113, 185], [114, 185], [115, 184], [116, 183], [117, 182], [118, 182], [119, 181], [120, 180], [121, 179], [122, 179], [123, 178], [124, 177], [125, 176], [126, 176], [127, 175], [128, 174]]\n")])]),e._v(" "),i("div",{staticClass:"line-numbers-wrapper"},[i("span",{staticClass:"line-number"},[e._v("1")]),i("br")])]),i("p",[i("code",[e._v("max_discount = 174")])]),e._v(" "),i("h5",{attrs:{id:"pairing-operation"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#pairing-operation"}},[e._v("#")]),e._v(" Pairing operation")]),e._v(" "),i("p",[e._v("Cost of the pairing operation is "),i("code",[e._v("55000*k + 65000")]),e._v(" where "),i("code",[e._v("k")]),e._v(" is a number of pairs.")]),e._v(" "),i("h2",{attrs:{id:"rationale"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#rationale"}},[e._v("#")]),e._v(" Rationale")]),e._v(" "),i("p",[e._v("Motivation section covers a total motivation to have operations over BLS12-377 curve available. We also extend a rationale for move specific fine points.")]),e._v(" "),i("h4",{attrs:{id:"multiexponentiation-as-a-separate-call"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#multiexponentiation-as-a-separate-call"}},[e._v("#")]),e._v(" Multiexponentiation as a separate call")]),e._v(" "),i("p",[e._v("Explicit separate multiexponentiation operation that allows one to save execution time (so gas) by both the algorithm used (namely Peppinger algorithm) and (usually forgotten) by the fact that "),i("code",[e._v("CALL")]),e._v(" operation in Ethereum is expensive (at the time of writing), so one would have to pay non-negigible overhead if e.g. for multiexponentiation of "),i("code",[e._v("100")]),e._v(" points would have to call the multipication precompile "),i("code",[e._v("100")]),e._v(" times and addition for "),i("code",[e._v("99")]),e._v(" times (roughly "),i("code",[e._v("138600")]),e._v(" would be saved).")]),e._v(" "),i("h2",{attrs:{id:"backwards-compatibility"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#backwards-compatibility"}},[e._v("#")]),e._v(" Backwards Compatibility")]),e._v(" "),i("p",[e._v("There are no backward compatibility questions.")]),e._v(" "),i("h2",{attrs:{id:"important-notes"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#important-notes"}},[e._v("#")]),e._v(" Important notes")]),e._v(" "),i("h3",{attrs:{id:"subgroup-checks"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#subgroup-checks"}},[e._v("#")]),e._v(" Subgroup checks")]),e._v(" "),i("p",[e._v("Subgroup check "),i("strong",[e._v("is mandatory")]),e._v(" during the pairing call. Implementations "),i("em",[e._v("should")]),e._v(" use fast subgroup checks: at the time of writing multiplication gas cost is based on "),i("code",[e._v("double-and-add")]),e._v(' multiplication method that has a clear "worst case" (all bits are equal to one). For pairing operation it\'s expected that implementation uses faster subgroup check, e.g. by using wNAF multiplication method for elliptic curves that is ~ '),i("code",[e._v("40%")]),e._v(" cheaper with windows size equal to 4. (Tested empirically. Savings are due to lower hamming weight of the group order and even lower hamming weight for wNAF. Concretely, subgroup check for both G1 and G2 points in a pair are around "),i("code",[e._v("35000")]),e._v(" combined).")]),e._v(" "),i("h2",{attrs:{id:"test-cases"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#test-cases"}},[e._v("#")]),e._v(" Test Cases")]),e._v(" "),i("p",[e._v("Due to the large test parameters space we first provide properties that various operations must satisfy. We use additive notation for point operations, capital letters ("),i("code",[e._v("P")]),e._v(", "),i("code",[e._v("Q")]),e._v(") for points, small letters ("),i("code",[e._v("a")]),e._v(", "),i("code",[e._v("b")]),e._v(") for scalars. Generator for G1 is labeled as "),i("code",[e._v("G")]),e._v(", generator for G2 is labeled as "),i("code",[e._v("H")]),e._v(", otherwise we assume random point on a curve in a correct subgroup. "),i("code",[e._v("0")]),e._v(" means either scalar zero or point of infinity. "),i("code",[e._v("1")]),e._v(" means either scalar one or multiplicative identity. "),i("code",[e._v("group_order")]),e._v(" is a main subgroup order. "),i("code",[e._v("e(P, Q)")]),e._v(" means pairing operation where "),i("code",[e._v("P")]),e._v(" is in G1, "),i("code",[e._v("Q")]),e._v(" is in G2.")]),e._v(" "),i("p",[e._v("Requeired properties for basic ops (add/multiply):")]),e._v(" "),i("ul",[i("li",[e._v("Commutativity: "),i("code",[e._v("P + Q = Q + P")])]),e._v(" "),i("li",[e._v("Additive negation: "),i("code",[e._v("P + (-P) = 0")])]),e._v(" "),i("li",[e._v("Doubling "),i("code",[e._v("P + P = 2*P")])]),e._v(" "),i("li",[e._v("Subgroup check: "),i("code",[e._v("group_order * P = 0")])]),e._v(" "),i("li",[e._v("Trivial multiplication check: "),i("code",[e._v("1 * P = P")])]),e._v(" "),i("li",[e._v("Multiplication by zero: "),i("code",[e._v("0 * P = 0")])]),e._v(" "),i("li",[e._v("Multiplication by the unnormalized scalar "),i("code",[e._v("(scalar + group_order) * P = scalar * P")])])]),e._v(" "),i("p",[e._v("Required properties for pairing operation:")]),e._v(" "),i("ul",[i("li",[e._v("Degeneracy "),i("code",[e._v("e(P, 0*Q) = e(0*P, Q) = 1")])]),e._v(" "),i("li",[e._v("Bilinearity "),i("code",[e._v("e(a*P, b*Q) = e(a*b*P, Q) = e(P, a*b*Q)")]),e._v(" (internal test, not visible through ABI)")])]),e._v(" "),i("p",[e._v("Test vector for all operations are expanded in this "),i("code",[e._v("csv")]),e._v(" files in "),i("a",{attrs:{href:"https://github.com/matter-labs/eip1962/tree/master/src/test/test_vectors/eip2537",target:"_blank",rel:"noopener noreferrer"}},[e._v("repo"),i("OutboundLink")],1),e._v(".")]),e._v(" "),i("h2",{attrs:{id:"implementation"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#implementation"}},[e._v("#")]),e._v(" Implementation")]),e._v(" "),i("p",[e._v("There is a various choice of existing implementations of the curve operations. It may require extra work to add an ABI:")]),e._v(" "),i("ul",[i("li",[e._v("EIP1962 code bases with fixed parameters\n"),i("ul",[i("li",[i("a",{attrs:{href:"https://github.com/matter-labs/eip1962",target:"_blank",rel:"noopener noreferrer"}},[e._v("Rust"),i("OutboundLink")],1)]),e._v(" "),i("li",[i("a",{attrs:{href:"https://github.com/matter-labs/eip1962_cpp",target:"_blank",rel:"noopener noreferrer"}},[e._v("C++"),i("OutboundLink")],1)])])]),e._v(" "),i("li",[e._v("Original implementation linked in Zexe paper in "),i("a",{attrs:{href:"https://github.com/scipr-lab/zexe",target:"_blank",rel:"noopener noreferrer"}},[e._v("Rust"),i("OutboundLink")],1)]),e._v(" "),i("li",[e._v("Standalone in "),i("a",{attrs:{href:"https://github.com/kilic/bls12-377",target:"_blank",rel:"noopener noreferrer"}},[e._v("Go"),i("OutboundLink")],1)])]),e._v(" "),i("h2",{attrs:{id:"security-considerations"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#security-considerations"}},[e._v("#")]),e._v(" Security Considerations")]),e._v(" "),i("p",[e._v("Strictly following the spec will eliminate security implications or consensus implications in a contrast to the previous BN254 precompile.")]),e._v(" "),i("p",[e._v('Important topic is a "constant time" property for performed operations. We explicitly state that this precompile '),i("strong",[e._v("IS NOT REQUIRED")]),e._v(" to perform all the operations using constant time algorithms.")]),e._v(" "),i("h2",{attrs:{id:"copyright"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),i("p",[e._v("Copyright and related rights waived via "),i("a",{attrs:{href:"https://creativecommons.org/publicdomain/zero/1.0/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CC0"),i("OutboundLink")],1),e._v(".")])])}),[],!1,null,null,null);t.default=o.exports}}]);