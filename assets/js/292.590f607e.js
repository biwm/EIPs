(window.webpackJsonp=window.webpackJsonp||[]).push([[292],{692:function(t,e,a){"use strict";a.r(e);var s=a(46),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"simple-summary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#simple-summary"}},[t._v("#")]),t._v(" Simple Summary")]),t._v(" "),a("p",[t._v("Two new transaction types for wrapping legacy transactions with and without a chain ID.")]),t._v(" "),a("h2",{attrs:{id:"abstract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[t._v("#")]),t._v(" Abstract")]),t._v(" "),a("p",[t._v("Introduces two new "),a("RouterLink",{attrs:{to:"/eip-2718.html"}},[t._v("EIP-2718")]),t._v(" transactions that are signature compatible with legacy transactions and can be automatically upgraded by any client.")],1),t._v(" "),a("ul",[a("li",[a("code",[t._v("0x00 || ssz.serialize(yParity, r, s, rlp([nonce, gasPrice, gasLimit, to, value, data]))")])]),t._v(" "),a("li",[a("code",[t._v("0x01 || ssz.serialize(yParity, r, s, rlp([nonce, gasPrice, gasLimit, to, value, data, chainId, 0, 0]))")])])]),t._v(" "),a("h2",{attrs:{id:"motivation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[t._v("#")]),t._v(" Motivation")]),t._v(" "),a("p",[t._v("We would like to eventually deprecate legacy transactions so we no longer have to retain code in the networking and signer layer that deals with them.\nHowever, we also want to ensure that signatures for transactions that were generated prior to that deprecation are still valid and funds don't end up stuck because of an inability to sign a new style transaction.\nThis EIP provides a mechanism for transmitting/including transactions in a way that is "),a("RouterLink",{attrs:{to:"/eip-2718.html"}},[t._v("EIP-2718")]),t._v(" compatible while still being signature compatible with legacy transactions.")],1),t._v(" "),a("h2",{attrs:{id:"specification"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[t._v("#")]),t._v(" Specification")]),t._v(" "),a("h3",{attrs:{id:"definitions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#definitions"}},[t._v("#")]),t._v(" Definitions")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("||")]),t._v(" is the byte/byte-array concatenation operator.")]),t._v(" "),a("li",[a("code",[t._v("yParity")]),t._v(" is the parity (0 for even, 1 for odd) of the "),a("code",[t._v("y")]),t._v(" value of the curve point for which "),a("code",[t._v("r")]),t._v(" is the "),a("code",[t._v("x")]),t._v(" value in the secp256k1 signing process.")])]),t._v(" "),a("h3",{attrs:{id:"transactions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transactions"}},[t._v("#")]),t._v(" Transactions")]),t._v(" "),a("p",[t._v("As of "),a("code",[t._v("FORK_BLOCK_NUMBER")]),t._v(", "),a("code",[t._v("0x00 || ssz.serialize(yParity, r, s, rlp([nonce, gasPrice, gasLimit, to, value, data]))")]),t._v(" will be a valid transaction where:")]),t._v(" "),a("ul",[a("li",[t._v("the RLP encoded transaction portion is signed/processed/handled exactly the same as legacy transactions were signed/processed/handled, with the exception of the final encoding")]),t._v(" "),a("li",[t._v("TODO: Hashing or Merkleizing for block transaction root")])]),t._v(" "),a("p",[t._v("As of "),a("code",[t._v("FORK_BLOCK_NUMBER")]),t._v(", "),a("code",[t._v("0x01 || ssz.serialize(yParity, r, s, rlp([nonce, gasPrice, gasLimit, to, value, data, chainId, 0, 0]))")]),t._v(" will be a valid transaction where:")]),t._v(" "),a("ul",[a("li",[t._v("the RLP encoded transaction portion is signed/processed/handled exactly the same as legacy transactions were signed/processed/handled, with the exception of the final encoding")]),t._v(" "),a("li",[t._v("TODO: Hashing or Merkleizing for block transaction root")])]),t._v(" "),a("p",[t._v("The SSZ schema for both transaction types is:")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Transaction[\n  yParity: boolean,\n  r: bytes32,\n  s: bytes32,\n  signedData: bytes,\n]\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("Note: "),a("code",[t._v("sszencode(yParity, r, s, rlp(...))")]),t._v(" is the same as "),a("code",[t._v("yParity || r || s || 0x45000000 || rlp(...)")])]),t._v(" "),a("p",[t._v("As of "),a("code",[t._v("FORK_BLOCK_NUMBER")]),t._v(", "),a("code",[t._v("rlp(nonce, gasPrice, gasLimit, to, value, data, v, r, s)")]),t._v(" will no longer be a valid transaction in a block.")]),t._v(" "),a("h3",{attrs:{id:"receipts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#receipts"}},[t._v("#")]),t._v(" Receipts")]),t._v(" "),a("p",[t._v("As of "),a("code",[t._v("FORK_BLOCK_NUMBER")]),t._v(", "),a("code",[t._v("0 || ssz.serialize(status, cumulativeGasUsed, logsBloom, logs)")]),t._v(" will be a valid receipt where:")]),t._v(" "),a("ul",[a("li",[t._v("the "),a("code",[t._v("ReceiptPayload")]),t._v(" will be generated/processed/handled exactly the same as legacy receipts were processed/handled with the exception of its encoding")]),t._v(" "),a("li",[t._v("TODO: Hashing or Merkleizing for block receipt root")])]),t._v(" "),a("p",[t._v("As of "),a("code",[t._v("FORK_BLOCK_NUMBER")]),t._v(", "),a("code",[t._v("1 || ssz.serialize(status, cumulativeGasUsed, logsBloom, logs)")]),t._v(" will be a valid receipt where:")]),t._v(" "),a("ul",[a("li",[t._v("the "),a("code",[t._v("ReceiptPayload")]),t._v(" will be generated/processed/handled exactly the same as legacy receipts were processed/handled with the exception of its encoding")]),t._v(" "),a("li",[t._v("TODO: Hashing or Merkleizing for block receipt root")])]),t._v(" "),a("p",[t._v("The SSZ schema for both receipt types is:")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Log[\n  address: bytes20,\n  topics: List[bytes32, 4],\n  data: List[uint8, 0xffffff],\n]\nReceipt[\n  status: uint8,\n  cumulativeGasUsed: uint64,\n  logsBloom: BitVector[2048],\n  logs: List[Log, 0xffffff],\n]\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[t._v("As of "),a("code",[t._v("FORK_BLOCK_NUMBER")]),t._v(", "),a("code",[t._v("rlp(status, cumulativeGasUsed, logsBloom, logs)")]),t._v(" will no longer be a valid receipt in a block.")]),t._v(" "),a("h2",{attrs:{id:"rationale"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rationale"}},[t._v("#")]),t._v(" Rationale")]),t._v(" "),a("h3",{attrs:{id:"signature-doesn-t-include-transaction-type-as-first-signature-byte"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#signature-doesn-t-include-transaction-type-as-first-signature-byte"}},[t._v("#")]),t._v(" Signature doesn't include transaction type as first signature byte")]),t._v(" "),a("p",[t._v("These transaction types are explicitly designed to be signature compatible with legacy transactions, which means we cannot change the data being signed.\nSee Security Considerations section for more details.")]),t._v(" "),a("h3",{attrs:{id:"two-transaction-types-instead-of-one"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#two-transaction-types-instead-of-one"}},[t._v("#")]),t._v(" Two transaction types instead of one")]),t._v(" "),a("p",[t._v("With the introduction of typed transactions, we no longer need to do bit packing to avoid changing the shape of the signature.\nLegacy transactions introduced chain ID in "),a("RouterLink",{attrs:{to:"/eip-155.html"}},[t._v("EIP-155")]),t._v(" and wanted to avoid changing the transaction array length, so it bitpacked the chainID into the signature's "),a("code",[t._v("v")]),t._v(" value.\nSince we no longer need to guarantee consistent payload lengths between transaction types, we have opted to have two transaction types with clear fields.")],1),t._v(" "),a("h3",{attrs:{id:"signature-separate-from-signed-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#signature-separate-from-signed-data"}},[t._v("#")]),t._v(" Signature separate from signed data")]),t._v(" "),a("p",[t._v("When validating a signature, one must first separate out the signed data from the signature and then validate the signature against the signed data.\nIn the case of legacy transactions, this was a bit of a burden since you had to first RLP decode the transaction, then extract out the signature, then RLP encode a subset of the transaction.\nEIP-155 made this process even worse by requiring the validator to further decode the "),a("code",[t._v("v")]),t._v(" signature value to extract the chain ID (if present) and include that in the signed data payload.\nBy having the signed data encoded exactly as it is signed, we make it so one can verify the transaction's signature without having to do any decoding before hand.\nBy having the signature SSZ encoded up front, we can easily extract the signature without even having to use a decoder.")]),t._v(" "),a("h3",{attrs:{id:"ssz-for-serialization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssz-for-serialization"}},[t._v("#")]),t._v(" SSZ for serialization")]),t._v(" "),a("p",[t._v('There is a weak consensus that RLP is not a particularly good encoding scheme for hashed data partially due to its inability to be streamed.\nSSZ is almost certainly going to be included in Ethereum at some point in the future, so clients likely have access to an SSZ decoder.\nFor this particular case, manual decoding without a full SSZ decoder isn\'t too complicated, though it does require doing a bit of "pointer math" since '),a("code",[t._v("logs")]),t._v(" is an array of variable length items.")]),t._v(" "),a("h3",{attrs:{id:"deprecating-legacy-transactions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deprecating-legacy-transactions"}},[t._v("#")]),t._v(" Deprecating legacy transactions")]),t._v(" "),a("p",[t._v("By deprecating legacy transactions, we make it easier for clients as they can always deal with typed transactions in blocks.")]),t._v(" "),a("h3",{attrs:{id:"max-length-of-logs-and-logs-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#max-length-of-logs-and-logs-data"}},[t._v("#")]),t._v(" Max length of logs and logs data")]),t._v(" "),a("p",[a("RouterLink",{attrs:{to:"/eip-706.html"}},[t._v("EIP-706")]),t._v(" limits devp2p messages to 24 bit length, which gives us a pragmatic cap at that for any single transaction at the moment.\nThis number seems to far exceed what is reasonable anytime in the near future, so feels like as reasonable of a cap as any.")],1),t._v(" "),a("h2",{attrs:{id:"backwards-compatibility"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#backwards-compatibility"}},[t._v("#")]),t._v(" Backwards Compatibility")]),t._v(" "),a("p",[t._v("The new transactions are signature compatible with legacy transactions.\nLegacy transactions can be decoded and then encoded as type 0 or type 1 transactions.\nThis EIP does not introduce any deprecation process for legacy encoded transactions, though the authors do encourage client developers to upgrade legacy encoded transactions to typed transactions as soon as it is reasonable.")]),t._v(" "),a("p",[t._v("The signature compatibility means that a client may see the same transaction encoded both ways.\nIn such a case the client can choose which to retain, but it is encouraged to retain the typed transaction rather than the legacy encoded transaction.\nSince the two transactions would share a nonce, only one will ever be valid in a chain at a time.")]),t._v(" "),a("h2",{attrs:{id:"test-cases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#test-cases"}},[t._v("#")]),t._v(" Test Cases")]),t._v(" "),a("p",[t._v("TBD")]),t._v(" "),a("h2",{attrs:{id:"implementation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implementation"}},[t._v("#")]),t._v(" Implementation")]),t._v(" "),a("p",[t._v("TBD")]),t._v(" "),a("h2",{attrs:{id:"security-considerations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#security-considerations"}},[t._v("#")]),t._v(" Security Considerations")]),t._v(" "),a("p",[t._v("While "),a("RouterLink",{attrs:{to:"/eip-2718.html"}},[t._v("EIP-2718")]),t._v(" strongly recommends including the transaction type as the first byte of the signed data, we cannot accomplish that in this case because we need to remain signature compatible with legacy transactions.\nLuckily, "),a("RouterLink",{attrs:{to:"/eip-2718.html"}},[t._v("EIP-2718")]),t._v(" also excludes transaction types "),a("code",[t._v("0xc0")]),t._v(" to "),a("code",[t._v("0xfe")]),t._v(" from valid transaction types, and the first byte of the signature in this case is in that range so we can be sure this will not conflict with any future transaction types.")],1),t._v(" "),a("p",[t._v("A signature for these transaction types "),a("strong",[t._v("does")]),t._v(" collide with legacy transactions, but the transactions will be processed the same so it doesn't matter if the transaction ends up included as a legacy transaction or a typed transaction.")]),t._v(" "),a("h2",{attrs:{id:"copyright"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[t._v("#")]),t._v(" Copyright")]),t._v(" "),a("p",[t._v("Copyright and related rights waived via "),a("a",{attrs:{href:"https://creativecommons.org/publicdomain/zero/1.0/",target:"_blank",rel:"noopener noreferrer"}},[t._v("CC0"),a("OutboundLink")],1),t._v(".")])])}),[],!1,null,null,null);e.default=n.exports}}]);