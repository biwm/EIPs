(window.webpackJsonp=window.webpackJsonp||[]).push([[403],{810:function(t,a,e){"use strict";e.r(a);var s=e(46),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"simple-summary"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#simple-summary"}},[t._v("#")]),t._v(" Simple Summary")]),t._v(" "),e("p",[t._v("A standard interface for canary contracts.")]),t._v(" "),e("h2",{attrs:{id:"abstract"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[t._v("#")]),t._v(" Abstract")]),t._v(" "),e("p",[t._v("The following standard allows the implementation of canaries within contracts.\nThis standard provides basic functionality to check if a canary is alive, keeping the canary alive and optionally manage feeders.")]),t._v(" "),e("h2",{attrs:{id:"motivation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[t._v("#")]),t._v(" Motivation")]),t._v(" "),e("p",[t._v("The canary can e.g. be used as a "),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Warrant_canary",target:"_blank",rel:"noopener noreferrer"}},[t._v("warrant canary"),e("OutboundLink")],1),t._v(".\nA standard interface allows other applications to easily interface with canaries on Ethereum - e.g. for visualizing the state, automated alarms, applications to feed the canary or contracts (e.g. insurance) that use the state.")]),t._v(" "),e("h2",{attrs:{id:"specification"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[t._v("#")]),t._v(" Specification")]),t._v(" "),e("h3",{attrs:{id:"methods"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),e("h4",{attrs:{id:"isalive"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#isalive"}},[t._v("#")]),t._v(" isAlive()")]),t._v(" "),e("p",[t._v("Returns if the canary was fed properly to signal e.g. that no warrant was received.")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("isAlive")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" constant "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("returns")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bool alive"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h4",{attrs:{id:"getblockofdeath"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#getblockofdeath"}},[t._v("#")]),t._v(" getBlockOfDeath()")]),t._v(" "),e("p",[t._v("Returns the block the canary died.\nThrows if the canary is alive.")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBlockOfDeath")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" constant "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("returns")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uint256 block"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h4",{attrs:{id:"gettype"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gettype"}},[t._v("#")]),t._v(" getType()")]),t._v(" "),e("p",[t._v("Returns the type of the canary:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("1")]),t._v(" = Simple (just the pure interface as defined in this ERC)")]),t._v(" "),e("li",[e("code",[t._v("2")]),t._v(" = Single feeder (as defined in ERC-TBD)")]),t._v(" "),e("li",[e("code",[t._v("3")]),t._v(" = Single feeder with bad food (as defined in ERC-TBD)")]),t._v(" "),e("li",[e("code",[t._v("4")]),t._v(" = Multiple feeders (as defined in ERC-TBD)")]),t._v(" "),e("li",[e("code",[t._v("5")]),t._v(" = Multiple mandatory feeders (as defined in ERC-TBD)")]),t._v(" "),e("li",[e("code",[t._v("6")]),t._v(" = IOT (as defined in ERC-TBD)")])]),t._v(" "),e("p",[e("code",[t._v("1")]),t._v(" might also be used for a special purpose contract that does not need a special type but still wants to expose the functions and provide events as defined in this ERC.")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getType")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" constant "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("returns")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uint8 type"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h3",{attrs:{id:"events"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#events"}},[t._v("#")]),t._v(" Events")]),t._v(" "),e("h4",{attrs:{id:"rip"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rip"}},[t._v("#")]),t._v(" RIP")]),t._v(" "),e("p",[t._v("MUST trigger when the contract is called the first time after the canary died.")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("event "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RIP")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h2",{attrs:{id:"implementation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#implementation"}},[t._v("#")]),t._v(" Implementation")]),t._v(" "),e("p",[t._v("TODO")]),t._v(" "),e("h2",{attrs:{id:"copyright"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[t._v("#")]),t._v(" Copyright")]),t._v(" "),e("p",[t._v("Copyright and related rights waived via "),e("a",{attrs:{href:"https://creativecommons.org/publicdomain/zero/1.0/",target:"_blank",rel:"noopener noreferrer"}},[t._v("CC0"),e("OutboundLink")],1),t._v(".")])])}),[],!1,null,null,null);a.default=n.exports}}]);