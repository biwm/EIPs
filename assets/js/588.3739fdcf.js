(window.webpackJsonp=window.webpackJsonp||[]).push([[588],{1003:function(t,e,a){"use strict";a.r(e);var n=a(46),r=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"simple-summary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#simple-summary"}},[t._v("#")]),t._v(" Simple Summary")]),t._v(" "),a("p",[t._v("Ethereum starts to track the number of transactions inside its state (for now, only number of transactions after this change is introduced, therefore it is called "),a("em",[t._v("Net")]),t._v(" transaction count). It is done by incrementing a storage slot in the special contract, called "),a("em",[t._v("State counter contract")]),t._v(" ("),a("RouterLink",{attrs:{to:"/zh/eip-2029.html"}},[t._v("EIP-2029")]),t._v(").")],1),t._v(" "),a("h2",{attrs:{id:"abstract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[t._v("#")]),t._v(" Abstract")]),t._v(" "),a("p",[t._v("It is part of the State Rent roadmap. This particular change makes any Ethereum transaction increment the transaction counter, which is a special storage slot in the "),a("em",[t._v("State counter contract")]),t._v(". This counter will be used to populate the nonces of newly created non-contract accounts. This way of populating nonce ensures replay protection for accounts that were evicted and then brought back by sending ether to them.")]),t._v(" "),a("h2",{attrs:{id:"motivation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[t._v("#")]),t._v(" Motivation")]),t._v(" "),a("p",[t._v("Ethereum currently does not have a special place in the state for tracking number of transactions.")]),t._v(" "),a("h2",{attrs:{id:"specification"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[t._v("#")]),t._v(" Specification")]),t._v(" "),a("p",[t._v("A new field, with the location 0 (that means it resides in the storage slot 0 in the state counter contract, and can be read by calling that contract with argument being 32 zero bytes), is added to the state counter contract. It will eventually contain "),a("code",[t._v("txCount")]),t._v(", the total number of transactions processed up until that point. On an after block B, or after the deployment of the state counter contract (which comes first), the field "),a("code",[t._v("txCount")]),t._v(" is incremented after each transaction. Updating "),a("code",[t._v("txCount")]),t._v(" means updating the storage of state counter contract at the location 0. These changes are never reverted.")]),t._v(" "),a("h2",{attrs:{id:"rationale"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rationale"}},[t._v("#")]),t._v(" Rationale")]),t._v(" "),a("p",[t._v("Two main alternatives were proposed for the replay protection of the accounts that were evicted by subsequently brought back by sending ether to them:")]),t._v(" "),a("ol",[a("li",[t._v("Temporal replay protection. The nonce of the new accounts (and those brought back) is still zero, but a new "),a("code",[t._v("valid-until")]),t._v(" field is introduced, making transactions invalid for inclusion after the time specified in this field. This, however, has unwanted side effected related to the fact that account nonces are not only used for replay protection, but also for computing the addresses of the deployed contracts (except those created by "),a("code",[t._v("CREATE2")]),t._v(").")]),t._v(" "),a("li",[t._v("Setting nonce of new accounts (and those brought back) to something depending on the current block number. This approach requires coming up with an arbitrary parameter, which is the maximum number of transaction in the block, so that the new nonces never clash with the existing nonces. This is mostly a concern for private networks at the moment, because they will potentially have significantly more transactions in a block.")])]),t._v(" "),a("h2",{attrs:{id:"backwards-compatibility"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#backwards-compatibility"}},[t._v("#")]),t._v(" Backwards Compatibility")]),t._v(" "),a("p",[t._v("This change is not backwards compatible and requires hard fork to be activated.")]),t._v(" "),a("h2",{attrs:{id:"test-cases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#test-cases"}},[t._v("#")]),t._v(" Test Cases")]),t._v(" "),a("p",[t._v("Tests cases will be generated out of a reference implementation.")]),t._v(" "),a("h2",{attrs:{id:"implementation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implementation"}},[t._v("#")]),t._v(" Implementation")]),t._v(" "),a("p",[t._v("There will be proof of concept implementation to refine and clarify the specification.")]),t._v(" "),a("h2",{attrs:{id:"copyright"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[t._v("#")]),t._v(" Copyright")]),t._v(" "),a("p",[t._v("Copyright and related rights waived via "),a("a",{attrs:{href:"https://creativecommons.org/publicdomain/zero/1.0/",target:"_blank",rel:"noopener noreferrer"}},[t._v("CC0"),a("OutboundLink")],1),t._v(".")])])}),[],!1,null,null,null);e.default=r.exports}}]);