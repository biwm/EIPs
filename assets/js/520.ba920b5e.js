(window.webpackJsonp=window.webpackJsonp||[]).push([[520],{929:function(e,t,a){"use strict";a.r(t);var i=a(46),s=Object(i.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"abstract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),a("p",[e._v("BIP32 defines a way to generate hierarchical trees of keys which can be derived from a common master key. BIP32 and "),a("a",{attrs:{href:"https://https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki",target:"_blank",rel:"noopener noreferrer"}},[e._v("BIP44"),a("OutboundLink")],1),e._v(" defines the usage of these keys as wallets. In this EIP we describe the usage of such keys outside the scope of the blockchain defining a logical tree for key usage which can coexist (and thus share the same master) with existing BIP44 compatible wallets.")]),e._v(" "),a("h2",{attrs:{id:"motivation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),a("p",[e._v("Applications interacting with the blockchain often make use of additional, non-blockchain technologies to perform the task they are designed for. For privacy and security sensitive mechanisms, sets of keys are needed. Reusing keys used for wallets can prove to be insecure, while keeping completely independent keys make backup and migration of the full set of credentials more complex. Defining a separate (from BIP44 compliant wallets) derivation branch allows combining the security of independent keys with the convenience of having a single piece of information which needs to be backup or migrated.")]),e._v(" "),a("h2",{attrs:{id:"specification"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),a("h3",{attrs:{id:"path-levels"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#path-levels"}},[e._v("#")]),e._v(" Path levels")]),e._v(" "),a("p",[e._v("We define the following levels in BIP32 path:")]),e._v(" "),a("p",[a("code",[e._v("m / purpose' / coin_type' / subpurpose' / key_type' / key_index")])]),e._v(" "),a("p",[e._v("Apostrophe in the path indicates that BIP32 hardened derivation is used.")]),e._v(" "),a("p",[e._v("This structure follows the "),a("a",{attrs:{href:"https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki",target:"_blank",rel:"noopener noreferrer"}},[e._v("BIP43"),a("OutboundLink")],1),e._v(" recommendations and its "),a("a",{attrs:{href:"https://github.com/bitcoin/bips/pull/523/files",target:"_blank",rel:"noopener noreferrer"}},[e._v("amendments for non-Bitcoin usage"),a("OutboundLink")],1),e._v(". Each level has a special meaning, described in the chapters below.")]),e._v(" "),a("h3",{attrs:{id:"purpose-coin-type-subpurpose"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#purpose-coin-type-subpurpose"}},[e._v("#")]),e._v(" Purpose/Coin Type/Subpurpose")]),e._v(" "),a("p",[e._v("This part is constant and set to "),a("code",[e._v("m / 43' / 60' / 1581'")]),e._v(", meaning BIP 43 -> Ethereum -> This EIP.")]),e._v(" "),a("p",[e._v("All subtrees under this prefix are the scope of this EIP.")]),e._v(" "),a("h3",{attrs:{id:"key-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#key-type"}},[e._v("#")]),e._v(" Key type")]),e._v(" "),a("p",[e._v('Describes the purpose for which the key is being used. Key types should be generic. "Instant messaging" is a good example whereas "Whisper" is not. The reason is that you want to be able to use the same identity across different services. Key types are defined at: TBD')]),e._v(" "),a("p",[e._v("Hardened derivation is used at this level.")]),e._v(" "),a("h3",{attrs:{id:"key-index"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#key-index"}},[e._v("#")]),e._v(" Key index")]),e._v(" "),a("p",[e._v("The key index is a field of variable length identifying a specific key. In its simplest case, it is a number from 0 to 2^31-1. If a larger identifier is desired (for example representing a hash or a GUID), the value must be split across several BIP32 nesting levels, most significant bit first and left aligned, bit-padded with 0s if needed. All levels, except the last one must used hardened key derivation. The last level must use public derivation. This means that every level can carry 31-bit of the identifier to represent.")]),e._v(" "),a("p",[e._v("As an example, let's assume we have a key with key type 4' and a key_index representing a 62-bit ID represented as hexadecimal 0x2BCDEFFEDCBAABCD the complete keypath would be  "),a("code",[e._v("m / 43' / 60' / 1581' / 4' / ‭1469833213‬' / ‭1555737549‬")]),e._v(". If you are using random identifiers, it might be convenient to generate a conventional GUID, for example 128-bit just fix the value of the most significant bit of each 32-bit word to 1 for all of them, except the last one which will be 0.")]),e._v(" "),a("h2",{attrs:{id:"rationale"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rationale"}},[e._v("#")]),e._v(" Rationale")]),e._v(" "),a("p",[e._v("The structure proposed above follows the BIP43 generic structure and is similar to the widely adopted BIP44 specification.")]),e._v(" "),a("h2",{attrs:{id:"copyright"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),a("p",[e._v("Copyright and related rights waived via "),a("a",{attrs:{href:"https://creativecommons.org/publicdomain/zero/1.0/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CC0"),a("OutboundLink")],1),e._v(".")])])}),[],!1,null,null,null);t.default=s.exports}}]);