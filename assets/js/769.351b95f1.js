(window.webpackJsonp=window.webpackJsonp||[]).push([[769],{1195:function(e,t,a){"use strict";a.r(t);var r=a(46),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"abstract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" ABSTRACT")]),e._v(" "),a("p",[e._v("A proposal to provide Single Instruction Multiple Data types and operations for the Ethereum Virtual Machine, making full use of the 256-bit wide EVM stack items, and offering substantial performance gains for both vector and scalar operations.")]),e._v(" "),a("h2",{attrs:{id:"motivation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" MOTIVATION")]),e._v(" "),a("p",[e._v("Most all modern CPUs include SIMD hardware that operates on wide registers of data, applying a Single Instruction to Multiple Data lanes in parallel, where lanes divide a register into a vector of scalar elements of equal size.  This model is an excellent fit for the wide stack items of the EVM, offering substantial performance boosts for operations that can be expressed as parallel operations on vectors of scalars.  For some examples, a brief literature search finds SIMD speedups of")]),e._v(" "),a("ul",[a("li",[e._v("up to 7X for "),a("a",{attrs:{href:"http://keccak.noekeon.org/sw_performance.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("SHA-512"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("4X for "),a("a",{attrs:{href:"https://link.springer.com/chapter/10.1007/3-540-45439-X_16",target:"_blank",rel:"noopener noreferrer"}},[e._v("elliptic curve scalar multiplication"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("3X to 4X for "),a("a",{attrs:{href:"https://github.com/minio/blake2b-simd",target:"_blank",rel:"noopener noreferrer"}},[e._v("BLAKE2b"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("up to 3X for "),a("a",{attrs:{href:"https://software.intel.com/en-us/articles/improving-openssl-performance",target:"_blank",rel:"noopener noreferrer"}},[e._v("OpenSSL"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("2X to 3X for "),a("a",{attrs:{href:"http://ieee-hpec.org/2013/index_htm_files/24-Simd-acceleration-Pabbuleti-2886999.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("elliptic curve modular multiplication"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("1.7X to 1.9X for "),a("a",{attrs:{href:"https://github.com/minio/sha256-simd",target:"_blank",rel:"noopener noreferrer"}},[e._v("SHA-256"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("1.3X for "),a("a",{attrs:{href:"https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.738.1218&rep=rep1&type=pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("RSA encryption"),a("OutboundLink")],1)])]),e._v(" "),a("h2",{attrs:{id:"specification"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" SPECIFICATION")]),e._v(" "),a("h3",{attrs:{id:"encoding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#encoding"}},[e._v("#")]),e._v(" Encoding")]),e._v(" "),a("p",[e._v("We propose a simple encoding of SIMD operations as extended two-byte codes.  The first byte is the opcode, and the second byte is the SIMD type: scalar type, lane width, and number of elements.")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("N bits")]),e._v(" "),a("th",[e._v("Field")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("8")]),e._v(" "),a("td",[e._v("opcode")])]),e._v(" "),a("tr",[a("td",[e._v("1")]),e._v(" "),a("td",[e._v("scalar type: 0 = unsigned integer, 1 = IEEE float")])]),e._v(" "),a("tr",[a("td",[e._v("1")]),e._v(" "),a("td",[e._v("reserved: 0")])]),e._v(" "),a("tr",[a("td",[e._v("2")]),e._v(" "),a("td",[e._v("lane width: log base 2 of the number of bytes, as an MSB first integer")])]),e._v(" "),a("tr",[a("td",[e._v("1")]),e._v(" "),a("td",[e._v("reserved: 0")])]),e._v(" "),a("tr",[a("td",[e._v("3")]),e._v(" "),a("td",[e._v("element count: log base 2 of the number of lanes, as an MSB first integer")])])])]),e._v(" "),a("p",[e._v("Thus we can specify SIMD types with unsigned integer lanes from 8 to 64 bits in vectors of 32 to 2 lanes, respectively.  Floating point lanes however support only 32- and 64-bit IEEE floating point.  And a type of "),a("em",[e._v("0x7F")]),e._v(" represents a normal 256-bit EVM integer.")]),e._v(" "),a("p",[a("em",[e._v("Note that when the element count is one the operation is on one scalar, so this specification also provides for native operations on single scalars of native sizes.")])]),e._v(" "),a("p",[a("em",[e._v("Note that floating point operations are "),a("strong",[e._v("not")]),e._v(" proposed for inclusion in the initial release, but we considered it important to reserve code space for possible future expansion.")])]),e._v(" "),a("h3",{attrs:{id:"semantics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#semantics"}},[e._v("#")]),e._v(" Semantics")]),e._v(" "),a("p",[e._v("We define the following extended versions of the EVM's arithmetic, logic, and comparison operations.  As with the normal versions, they consume their arguments from the stack and place their results on the stack, except that their arguments are vectors rather than scalars.")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("lo\\hi")]),e._v(" "),a("th",[e._v("B")]),e._v(" "),a("th",[e._v("C")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("0")]),e._v(" "),a("td"),e._v(" "),a("td",[e._v("XLT")])]),e._v(" "),a("tr",[a("td",[e._v("1")]),e._v(" "),a("td",[e._v("XADD")]),e._v(" "),a("td",[e._v("XGT")])]),e._v(" "),a("tr",[a("td",[e._v("2")]),e._v(" "),a("td",[e._v("XMUL")]),e._v(" "),a("td",[e._v("XSLT")])]),e._v(" "),a("tr",[a("td",[e._v("3")]),e._v(" "),a("td",[e._v("XSUB")]),e._v(" "),a("td",[e._v("XSGT")])]),e._v(" "),a("tr",[a("td",[e._v("4")]),e._v(" "),a("td",[e._v("XDIV")]),e._v(" "),a("td",[e._v("XEQ")])]),e._v(" "),a("tr",[a("td",[e._v("5")]),e._v(" "),a("td",[e._v("XSDIV")]),e._v(" "),a("td",[e._v("XISZERO")])]),e._v(" "),a("tr",[a("td",[e._v("6")]),e._v(" "),a("td",[e._v("XMOD")]),e._v(" "),a("td",[e._v("XAND")])]),e._v(" "),a("tr",[a("td",[e._v("7")]),e._v(" "),a("td",[e._v("XSMOD")]),e._v(" "),a("td",[e._v("XOR")])]),e._v(" "),a("tr",[a("td",[e._v("8")]),e._v(" "),a("td"),e._v(" "),a("td",[e._v("XXOR")])]),e._v(" "),a("tr",[a("td",[e._v("9")]),e._v(" "),a("td"),e._v(" "),a("td",[e._v("XNOT")])]),e._v(" "),a("tr",[a("td",[e._v("A")]),e._v(" "),a("td"),e._v(" "),a("td",[e._v("XINDEX")])]),e._v(" "),a("tr",[a("td",[e._v("B")]),e._v(" "),a("td"),e._v(" "),a("td",[e._v("XSHL")])]),e._v(" "),a("tr",[a("td",[e._v("C")]),e._v(" "),a("td"),e._v(" "),a("td",[e._v("XSHR")])]),e._v(" "),a("tr",[a("td",[e._v("D")]),e._v(" "),a("td"),e._v(" "),a("td",[e._v("XSAR")])]),e._v(" "),a("tr",[a("td",[e._v("E")]),e._v(" "),a("td",[e._v("XCAST")]),e._v(" "),a("td",[e._v("XROL")])]),e._v(" "),a("tr",[a("td",[e._v("F")]),e._v(" "),a("td",[e._v("XSHUFFLE")]),e._v(" "),a("td",[e._v("XROR")])])])]),e._v(" "),a("p",[e._v("Except for XSHUFFLE, XCAST, and XINDEX all the extended operations on unsigned integer values have the same semantics as the corresponding operations for codes 01 through 1F, except that the modulus varies by scalar type and the operations are applied pair-wise to the elements of the source operands to compute the destination elements.  "),a("em",[e._v("The source operands must have the same element type and number of elements.")]),e._v("  E.g.")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("PUSH uint8[1, 2, 3]\nPUSH uint8[4, 5, 6]\nXADD\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("leaves")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("uint8[5, 7, 9]\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("on the stack.")]),e._v(" "),a("p",[e._v("XSHUFFLE takes two vectors on the stack: a vector to permute and a permutation mask.  E.g.")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("PUSH uint64[4, 5, 6, 0]\nPUSH uint8[2, 0, 1, 3]\nSHUFFLE\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("leaves")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("uint64[6, 4, 5 , 0]\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("on the stack. The mask must have integral type, and the same number of elements as the source vector.")]),e._v(" "),a("p",[e._v("The second byte of the XCAST opcode is applied to the item on the stack to create a new vector of the specified type.  Elements are converted according to the usual C conventions, missing elements are set to zero, and extra elements are discarded.  If the stack item is not a vector it is converted to a vector by taking its bits least-significant-bit first and copying them into the corresponding bits of each element, least-significant-element first.  Again, excess data is truncated and missing data is 0-filled.  Vectors are converted to 256-bit EVM integers via the reverse process., with elements that are floating point NANs normalized to all bits on.")]),e._v(" "),a("p",[a("em",[e._v("Note that MLOAD and MSTORE are valid only on 256-bit EVM integers.  For SIMD vectors an XCAST is needed after a load and before a store to convert vectors to and from 256-bit integers.")])]),e._v(" "),a("p",[e._v("XINDEX has the same semantics as BYTE, except that individual elements of the vector are indexed.")]),e._v(" "),a("p",[e._v("Floating point values follow IEEE 754 semantics.  Since those are not defined for shifting and rotating those operations are defined here as having no effect.")]),e._v(" "),a("p",[e._v("Extended operations other than XSHUFFLE and XCAST are only valid on vectors of the same SIMD type.  This can be validated at contract creation time, or else checked at runtime.")]),e._v(" "),a("h3",{attrs:{id:"subroutines"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#subroutines"}},[e._v("#")]),e._v(" Subroutines")]),e._v(" "),a("p",[e._v("If "),a("a",{attrs:{href:"https://github.com/ethereum/EIPs/pull/187",target:"_blank",rel:"noopener noreferrer"}},[e._v("EIP-187"),a("OutboundLink")],1),e._v(" is accepted a type-safe syntax for declaring subroutines taking vector arguments will be needed.")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("BEGINSUBX n_args, arg_types... n_results, result_types...")]),e._v(" marks the "),a("strong",[e._v("single")]),e._v(" entry to a subroutine.  "),a("code",[e._v("n_args")]),e._v(" items are taken off of the stack at entry to, and "),a("code",[e._v("n_results")]),e._v(" items are placed on the stack at return from the subroutine. "),a("code",[e._v("n_args")]),e._v(" and "),a("code",[e._v("n_results")]),e._v(" are given as one immediate byte each.  The "),a("code",[e._v("arg_types")]),e._v(" and "),a("code",[e._v("result_types")]),e._v(" are given in the same encoding as second byte of the SIMD opcodes, and must match the values on the stack.  The bytecode for a subroutine ends at the next "),a("code",[e._v("BEGINSUB")]),e._v(", "),a("code",[e._v("BEGINSUBX")]),e._v(" or "),a("code",[e._v("BEGINDATA")]),e._v(" instruction or at the end of the bytecode.")])]),e._v(" "),a("h2",{attrs:{id:"rationale"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rationale"}},[e._v("#")]),e._v(" RATIONALE")]),e._v(" "),a("p",[e._v("Currently, the lowest common denominator for SIMD hardware (e.g. Intel SSE2 and ARM Neon) is 16-byte registers supporting integer lanes of 1, 2, 4, and 8 bytes, and floating point lanes of 4 and 8 bytes.  More recent SIMD hardware (e.g. Intel AVX) supports 32-byte registers, and EVM stack items are also 32 bytes wide.  The limits above derive from these numbers, assuring that EVM code is within the bounds of available hardware - and the reserved bits provide room for growth.")]),e._v(" "),a("p",[e._v("For most modern languages (including Rust, Python, Go, Java, and C++) compilers can do a good job of generating SIMD code for parallelizable loops, and/or there are intrinsics or libraries available for explicit access to SIMD hardware.  So a portable software implementation will likely provide good use of the hardware on most platforms, and intrinsics or libraries can be used as available and needed.  Thus we can expect these operations to take about the same (or for 256-bit vectors on 128-bit hardware up to twice) the time to execute regardless of element size or number of elements.")]),e._v(" "),a("h3",{attrs:{id:"gas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gas"}},[e._v("#")]),e._v(" Gas")]),e._v(" "),a("p",[e._v("One motivation for these operations, besides taking full advantage of the hardware, is assigning lower gas costs for operations on smaller scalars.")]),e._v(" "),a("p",[e._v("On a machine with 64-bit registers the standard algorithms from Knuth's "),a("a",{attrs:{href:"https://library.aceondo.net/ebooks/Computer_Science/algorithm-the_art_of_computer_programming-knuth.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Art of Computer Programming"),a("OutboundLink")],1),e._v(" require 32-bit digits, using the upper half of a register for overflows, so for 256-bit values N=8 digits are needed, and for 64-bit values N=2 digits are needed.  The cycle counts for these algorithms are:")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("operation")]),e._v(" "),a("th",[e._v("cycles")]),e._v(" "),a("th",[e._v("N = 2")]),e._v(" "),a("th",[e._v("N = 4")]),e._v(" "),a("th",[e._v("N = 8")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("add")]),e._v(" "),a("td",[e._v("10 "),a("em",[e._v("N")]),e._v(" + 6")]),e._v(" "),a("td",[e._v("26")]),e._v(" "),a("td",[e._v("46")]),e._v(" "),a("td",[e._v("86")])]),e._v(" "),a("tr",[a("td",[e._v("subtract")]),e._v(" "),a("td",[e._v("12 "),a("em",[e._v("N")]),e._v(" + 3")]),e._v(" "),a("td",[e._v("27")]),e._v(" "),a("td",[e._v("51")]),e._v(" "),a("td",[e._v("99")])]),e._v(" "),a("tr",[a("td",[e._v("multiply")]),e._v(" "),a("td",[e._v("28 "),a("em",[e._v("N")]),e._v("**2 + 11 "),a("em",[e._v("N")]),e._v(" + 3")]),e._v(" "),a("td",[e._v("137")]),e._v(" "),a("td",[e._v("495")]),e._v(" "),a("td",[e._v("1883")])]),e._v(" "),a("tr",[a("td",[e._v("divide")]),e._v(" "),a("td",[e._v("15 "),a("em",[e._v("N")]),e._v("**2 + 119 "),a("em",[e._v("N")]),e._v(" + 111")]),e._v(" "),a("td",[e._v("409")]),e._v(" "),a("td",[e._v("827")]),e._v(" "),a("td",[e._v("2023")])])])]),e._v(" "),a("p",[e._v("The remaining operations are of about the same complexity as addition and subtraction, or less. Given that JUMPDEST is a no-op, and is assigned a gas price of 1, this can be taken as the overhead of the interpreter.  All of the arithmetic operations are assigned the same gas price of 5, for a remaining runtime of 4.  The interpreter loop itself takes about 6 to 8 C instructions, so ADD and SUB are reasonably priced, but MUL is some 5 to 21 times slower than ADD or SUB, and DIV is some 15 to 23 times slower, so they are clearly mispriced.")]),e._v(" "),a("p",[e._v("By comparison, on most "),a("a",{attrs:{href:"https://software.intel.com/sites/landingpage/IntrinsicsGuide",target:"_blank",rel:"noopener noreferrer"}},[e._v("Intel"),a("OutboundLink")],1),e._v(" and "),a("a",{attrs:{href:"https://developer.arm.com/docs/100166/latest/programmers-model/instruction-set-summary/table-of-processor-instructions",target:"_blank",rel:"noopener noreferrer"}},[e._v("ARM"),a("OutboundLink")],1),e._v(" SIMD units instructions take approximately the following cycle counts, independent of register width.")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("operation")]),e._v(" "),a("th",[e._v("Intel cycles")]),e._v(" "),a("th",[e._v("ARM cycles")]),e._v(" "),a("th",[e._v("gas")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("add")]),e._v(" "),a("td",[e._v(".5")]),e._v(" "),a("td",[e._v("1")]),e._v(" "),a("td",[e._v("1")])]),e._v(" "),a("tr",[a("td",[e._v("subtract")]),e._v(" "),a("td",[e._v(".5")]),e._v(" "),a("td",[e._v("1")]),e._v(" "),a("td",[e._v("1")])]),e._v(" "),a("tr",[a("td",[e._v("multiply")]),e._v(" "),a("td",[e._v("2")]),e._v(" "),a("td",[e._v("1")]),e._v(" "),a("td",[e._v("1")])]),e._v(" "),a("tr",[a("td",[e._v("divide")]),e._v(" "),a("td",[e._v("10")]),e._v(" "),a("td",[e._v("12")]),e._v(" "),a("td",[e._v("2")])])])]),e._v(" "),a("p",[e._v("Since all but the divide operation take fewer cycles than the interpreter overhead they are assigned the minimal cost of 1.  Division takes slightly more, and is assigned a cost of 2.")])])}),[],!1,null,null,null);t.default=s.exports}}]);