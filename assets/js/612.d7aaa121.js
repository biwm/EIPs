(window.webpackJsonp=window.webpackJsonp||[]).push([[612],{1028:function(e,t,s){"use strict";s.r(t);var a=s(46),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"abstract"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),s("p",[e._v("This proposal introduces five opcodes to support simple subroutines and relative jumps: "),s("code",[e._v("JUMPSUB")]),e._v(", "),s("code",[e._v("RETURNSUB")]),e._v(", "),s("code",[e._v("RJUMP")]),e._v(", "),s("code",[e._v("RJUMPI")]),e._v(", and "),s("code",[e._v("RJUMPV")]),e._v(".")]),e._v(" "),s("p",[e._v("These provide a safe, complete, static control-flow facility that supports substantial reductions in the complexity and the gas costs of calling and optimizing simple subroutines – from %33 to as much as 52% savings in gas.")]),e._v(" "),s("p",[e._v("Valid contracts will not halt with an exception unless they run out of gas or overflow stack while making a recursive subroutine call.")]),e._v(" "),s("h2",{attrs:{id:"motivation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),s("p",[e._v("The EVM does not provide subroutines as a primitive.  Instead, calls can be synthesized by fetching and pushing the current program counter on the data stack and jumping to the subroutine address; returns can be synthesized by getting the return address to the top of the stack and jumping back to it.  These conventions create unnecessary cost and complexity that is borne by the humans and programs writing, reading, and analyzing EVM code,")]),e._v(" "),s("p",[e._v("Facilities to directly support subroutines are provided by all but one of the real and virtual machines programmed by the lead author, including the Burroughs 5000, CDC 7600, IBM 360, DEC PDP 11 and VAX, Motorola 68000, a few generations of Intel silicon, Sun SPARC, UCSD p-Machine, Sun JVM, Wasm, and the sole exception -- the EVM.  In whatever form, these operations provide for")]),e._v(" "),s("ul",[s("li",[e._v("capturing the current context of execution,")]),e._v(" "),s("li",[e._v("transferring control to a new context, and")]),e._v(" "),s("li",[e._v("returning to the original context\n"),s("ul",[s("li",[e._v("after possible further transfers of control")]),e._v(" "),s("li",[e._v("to some arbitrary depth.")])])])]),e._v(" "),s("p",[e._v("The concept goes back to "),s("a",{attrs:{href:"http://www.alanturing.net/turing_archive/archive/p/p01/P01-001.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Turing, 1946"),s("OutboundLink")],1),e._v(":")]),e._v(" "),s("blockquote",[s("p",[e._v("We also wish to be able to arrange for the splitting up of operations into subsidiary operations.  This should be done in such a way that once we have written down how an operation is done we can use it as a subsidiary to any other operation. ... When we wish to start on a subsidiary operation we need only make a note of where we left off the major operation and then apply the first instruction of the subsidiary.  When the subsidiary is over we look up the note and continue with the major operation. Each subsidiary operation can end with instructions for this recovery of the note.  How is the burying and disinterring of the note to be done?  There are of course many ways.  One is to keep a list of these notes in one or more standard size delay lines, (1024) with the most recent last.  The position of the most recent of these will be kept in a fixed TS, and this reference will be modified every time a subsidiary is started or finished...")])]),e._v(" "),s("p",[e._v("We propose to follow Turing's simple concept in our subroutine design, as specified below.  And we propose to validate the safe use of facility, so that valid contracts will not halt with an exception unless they run out of gas or overflow stack while making a recursive subroutine call.")]),e._v(" "),s("h3",{attrs:{id:"gas-cost-analysis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gas-cost-analysis"}},[e._v("#")]),e._v(" Gas Cost Analysis")]),e._v(" "),s("p",[e._v("We show here how these opcodes can be used to reduce the gas costs of both ordinary subroutine calls and low-level optimizations.  The savings reported here will of course be less relevant to programs that use a few large subroutines rather than being a factored than into smaller ones.  The choices of gas costs for the new opcodes below do not make a large difference in this analysis, as much of the improvement is due to PUSH and SWAP operations that are no longer needed.  Even if "),s("code",[e._v("JUMPSUB")]),e._v(" cost the same as "),s("code",[e._v("JUMP")]),e._v(" – 8 gas rather than 5 - a simple subroutine call would still be 48% less costly versus 52%.")]),e._v(" "),s("h4",{attrs:{id:"simple-subroutine-call"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#simple-subroutine-call"}},[e._v("#")]),e._v(" "),s("strong",[e._v("Simple Subroutine Call")])]),e._v(" "),s("p",[e._v("Consider this example of calling a fairly minimal subroutine using "),s("code",[e._v("JUMPSUB")])]),e._v(" "),s("p",[e._v("Subroutine call, using "),s("code",[e._v("JUMPSUB")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("TEST_SQUARE:\n    jumpdest        ; 1 gas\n    0x02            ; 3 gas\n    jumpsub SQUARE  ; 5 gas\n    returnsub       ; 3 gas\n\nSQUARE:\n    jumpdest        ; 1 gas\n    dup1            ; 3 gas\n    mul             ; 5 gas\n    returnsub       ; 3 gas\n\nTotal 24 gas.\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("p",[e._v("Subroutine call, using "),s("code",[e._v("JUMP")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("TEST_SQUARE:\n    jumpdest        ; 1 gas\n    RTN_SQUARE      ; 3 gas\n    0x02            ; 3 gas\n    SQUARE          ; 3 gas\n    jump            ; 8 gas\nRTN_SQUARE:\n    jumpdest        ; 1 gas\n    swap1           ; 3 gas\n    jump            ; 8 gas\n\nSQUARE:\n    jumpdest        ; 1 gas\n    dup1            ; 3 gas\n    mul             ; 5 gas\n    swap1           ; 3 gas\n    jump            ; 8 gas\n\nTotal: 50 gas\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br")])]),s("p",[e._v("Using "),s("code",[e._v("JUMPSUB")]),e._v(" saves "),s("em",[e._v("50 - 24 = 26")]),e._v(" gas versus using "),s("code",[e._v("JUMP")]),e._v(" -- a "),s("em",[e._v("52%")]),e._v(" performance improvement.")]),e._v(" "),s("h4",{attrs:{id:"tail-call-optimization"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tail-call-optimization"}},[e._v("#")]),e._v(" "),s("strong",[e._v("Tail Call Optimization")])]),e._v(" "),s("p",[e._v("Of course in cases like this one we can optimize the tail call, so that the return from "),s("code",[e._v("SQUARE")]),e._v(" actually returns from TEST_SQUARE.")]),e._v(" "),s("p",[e._v("Tail call optimization, using "),s("code",[e._v("RJUMP")]),e._v(" and "),s("code",[e._v("RETURNSUB")]),e._v(".")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("TEST_SQUARE:\n    jumpdest        ; 1 gas\n    0x02            ; 3 gas\n    rjump SQUARE    ; 3 gas\n\nSQUARE:\n    jumpdest        ; 1 gas\n    dup1            ; 3 gas\n    mul             ; 5 gas\n    returnsub       ; 3 gas\n\nTotal: 19 gas\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br")])]),s("p",[e._v("Tail call optimization, using "),s("code",[e._v("JUMP")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("TEST_SQUARE:\n    jumpdest        ; 1 gas\n    0x02            ; 3 gas\n    SQUARE          ; 3 gas\n    jump            ; 8 gas\n\nSQUARE:\n    jumpdest        ; 1 gas\n    dup1            ; 3 gas\n    mul             ; 5 gas\n    swap1           ; 3 gas\n    jump            ; 8 gas\n\nTotal: 33 gas\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br")])]),s("p",[e._v("Using "),s("code",[e._v("JUMPSUB")]),e._v(" versus "),s("code",[e._v("JUMP")]),e._v(" saves "),s("em",[e._v("33 - 19 = 14")]),e._v(" gas -- a "),s("em",[e._v("42%")]),e._v(" performance improvement.")]),e._v(" "),s("p",[e._v("So we can see that these instructions provide a simpler and more efficient subroutine mechanism than dynamic jumps.")]),e._v(" "),s("h4",{attrs:{id:"tail-call-elimination"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tail-call-elimination"}},[e._v("#")]),e._v(" "),s("strong",[e._v("Tail Call Elimination")])]),e._v(" "),s("p",[e._v("We can even take advantage of "),s("code",[e._v("SQUARE")]),e._v(" just happening to directly follow "),s("code",[e._v("TEST_SQUARE")]),e._v(" and just fall through rather than jump at all.")]),e._v(" "),s("p",[e._v("Tail call "),s("code",[e._v("elimination")]),e._v(", using JUMPSUB.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("TEST_SQUARE:\n    jumpdest        ; 1 gas\n    0x02            ; 3 gas\nSQUARE:\n    jumpdest        ; 1 gas\n    dup1            ; 3 gas\n    mul             ; 5 gas\n    returnsub       ; 3 gas\n\nTotal 16 gas.\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("p",[e._v("Tail call elimination, using JUMP.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("TEST_SQUARE:\n    jumpdest        ; 1 gas\n    0x02            ; 3 gas\nSQUARE:\n    jumpdest        ; 1 gas\n    dup1            ; 3 gas\n    mul             ; 5 gas\n    swap1           ; 3 gas\n    jump            ; 8 gas\n\nTotal: 24 gas\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("p",[e._v("Using "),s("code",[e._v("RETURNSUB")]),e._v(" versus "),s("code",[e._v("JUMP")]),e._v(" saves "),s("em",[e._v("24 - 16 = 8")]),e._v(" gas -- a "),s("em",[e._v("33%")]),e._v(" performance improvement.")]),e._v(" "),s("p",[e._v("We can also consider the alternative subroutine call, using a version of "),s("code",[e._v("JUMPSUB")]),e._v(" that pushes its return address on the stack.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("TEST_SQUARE:\n    jumpdest        ; 1 gas\n    0x02            ; 3 gas\n    jumpsub SQUARE  ; 5 gas\n    swap1           ; 3 gas\n    returnsub       ; 3 gas\n\nSQUARE:\n    jumpdest        ; 1 gas\n    dup1            ; 3 gas\n    mul             ; 5 gas\n    swap1           ; 3 gas\n    returnsub       ; 3 gas\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("p",[e._v("Total "),s("em",[e._v("31")]),e._v(" gas, compared to "),s("em",[e._v("24")]),e._v(" gas for the return stack version.")]),e._v(" "),s("h2",{attrs:{id:"specification"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),s("p",[e._v("We introduce one more stack into the EVM in addition to the existing "),s("code",[e._v("data stack")]),e._v(", which we call the "),s("code",[e._v("return stack")]),e._v(". The "),s("code",[e._v("return stack")]),e._v(" is limited to "),s("code",[e._v("1024")]),e._v(" items. This stack supports three new instructions for subroutines.")]),e._v(" "),s("h3",{attrs:{id:"instructions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#instructions"}},[e._v("#")]),e._v(" Instructions")]),e._v(" "),s("h4",{attrs:{id:"jumpsub-0x5e-location"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jumpsub-0x5e-location"}},[e._v("#")]),e._v(" "),s("code",[e._v("JUMPSUB (0x5e) location")])]),e._v(" "),s("blockquote",[s("p",[e._v("Transfers control to a subroutine.")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("Decode the "),s("code",[e._v("location")]),e._v(" from the immediate data.  The data is encoded as three bytes, MSB-first.")])]),e._v(" "),s("li",[s("p",[e._v("Set "),s("code",[e._v("PC")]),e._v(" to "),s("code",[e._v("location")]),e._v(".")]),e._v(" "),s("p",[e._v("The cost is "),s("em",[e._v("low")]),e._v(".")])])]),e._v(" "),s("ul",[s("li",[s("em",[e._v("pops one item off the "),s("code",[e._v("data stack")])])]),e._v(" "),s("li",[s("em",[e._v("pushes one item on the "),s("code",[e._v("return stack")])])])])]),e._v(" "),s("h4",{attrs:{id:"returnsub-0x5f"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returnsub-0x5f"}},[e._v("#")]),e._v(" "),s("code",[e._v("RETURNSUB (0x5f)")])]),e._v(" "),s("blockquote",[s("p",[e._v("Returns control to the caller of a subroutine.")]),e._v(" "),s("ol",[s("li",[e._v("Pop "),s("code",[e._v("PC")]),e._v(" off the "),s("code",[e._v("return stack")]),e._v(".")])]),e._v(" "),s("p",[e._v("The cost is "),s("em",[e._v("verylow")]),e._v(".")]),e._v(" "),s("ul",[s("li",[s("em",[e._v("pops one item off the "),s("code",[e._v("return stack")])])])])]),e._v(" "),s("p",[e._v("To provide a complete set of control structures, and to take full advantage of the performance benefits of simple subroutines we also provide two  static, relative jump functions that take their arguments as immediate data rather then off the stack.")]),e._v(" "),s("h4",{attrs:{id:"rjump-0x5c-offset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rjump-0x5c-offset"}},[e._v("#")]),e._v(" "),s("code",[e._v("RJUMP (0x5c) offset")])]),e._v(" "),s("blockquote",[s("p",[e._v("Transfers control to the address "),s("code",[e._v("PC + offset")]),e._v(", where "),s("code",[e._v("offset")]),e._v(" is a two-byte, MSB first, twos-complement integer.")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("Decode the "),s("code",[e._v("offset")]),e._v(" from the immediate data.  The data is encoded as a two-byte, MSB first, twos-complement integer.")])]),e._v(" "),s("li",[s("p",[e._v("Set "),s("code",[e._v("PC")]),e._v(" to "),s("code",[e._v("location")]),e._v(".")]),e._v(" "),s("p",[e._v("The cost is "),s("em",[e._v("low")]),e._v(".")])])])]),e._v(" "),s("h4",{attrs:{id:"rjumpi-0x5d-offset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rjumpi-0x5d-offset"}},[e._v("#")]),e._v(" "),s("code",[e._v("RJUMPI (0x5d) offset")])]),e._v(" "),s("blockquote",[s("p",[e._v("Conditionally transfers control to the address "),s("code",[e._v("PC + offset")]),e._v(", where offset is a two byte, MSB first, twos-complement integer. 1. Decode the "),s("code",[e._v("offset")]),e._v(" from the immediate data.  The data is encoded as a two-byte, MSB first, twos-complement integer. 2. Pop the "),s("code",[e._v("condition")]),e._v(" from the stack. 3. If the condition is true then continue 4. Set "),s("code",[e._v("PC")]),e._v(" to "),s("code",[e._v("PC + offset")]),e._v(".")]),e._v(" "),s("p",[e._v("The cost is "),s("em",[e._v("mid")]),e._v(".")])]),e._v(" "),s("h4",{attrs:{id:"rjumpv-0x5e-n-offset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rjumpv-0x5e-n-offset"}},[e._v("#")]),e._v(" "),s("code",[e._v("RJUMPV (0x5e) n offset ...")])]),e._v(" "),s("blockquote",[s("p",[e._v("Transfers control to the address at "),s("code",[e._v("SP[0] + PC + 2 + offset")]),e._v("; or else to the default address, where "),s("code",[e._v("n")]),e._v(" and "),s("code",[e._v("offset")]),e._v(" are two-byte, MSB first, twos-complement integers. 2. Pop "),s("code",[e._v("n")]),e._v(" from the stack. 1. Decode the "),s("code",[e._v("count")]),e._v(" from the immediate data.  The data is encoded as two-byte, MSB first, twos-complement. 4. "),s("code",[e._v("if (n < count) PC = PC[2 + 2*n] else PC = PC[2 + 2*count]")]),e._v(".")]),e._v(" "),s("p",[e._v("The cost is "),s("code",[e._v("high")]),e._v(".")])]),e._v(" "),s("p",[s("em",[e._v("Notes:")])]),e._v(" "),s("ul",[s("li",[s("em",[e._v("If a resulting "),s("code",[e._v("PC")]),e._v(" to be executed is beyond the last instruction then the opcode is implicitly a "),s("code",[e._v("STOP")]),e._v(", which is not an error.")])]),e._v(" "),s("li",[s("em",[e._v("Values popped off the "),s("code",[e._v("return stack")]),e._v(" do not need to be validated, since they are alterable only by "),s("code",[e._v("JUMPSUB")]),e._v(" and "),s("code",[e._v("RETURNSUB")]),e._v(".")])]),e._v(" "),s("li",[s("em",[e._v("The description above lays out the semantics of this feature in terms of a "),s("code",[e._v("return stack")]),e._v(".  But the actual state of the "),s("code",[e._v("return stack")]),e._v(" is not observable by EVM code or consensus-critical to the protocol.  (For example, a node implementer may code "),s("code",[e._v("JUMPSUB")]),e._v(" to unobservably push "),s("code",[e._v("PC")]),e._v(" on the "),s("code",[e._v("return stack")]),e._v(" rather than "),s("code",[e._v("PC + 1")]),e._v(", which is allowed so long as "),s("code",[e._v("RETURNSUB")]),e._v(" observably returns control to the "),s("code",[e._v("PC + 1")]),e._v(" location.)")])]),e._v(" "),s("li",[s("em",[e._v("The "),s("code",[e._v("return stack")]),e._v(' is the functional equivalent of Turing\'s "delay line".')])])]),e._v(" "),s("p",[s("code",[e._v("JUMP")]),e._v(" and "),s("code",[e._v("JUMPI")]),e._v(" are assigned "),s("em",[e._v("mid")]),e._v(" and "),s("em",[e._v("high")]),e._v(" gas fees, and they require operations on 256-bit stack items and checking for valid destinations  Whereas none of these operations require checking, and only "),s("code",[e._v("RJUMPI")]),e._v(" requires 256-bit arithmetic.  The "),s("em",[e._v("low")]),e._v(" cost of "),s("code",[e._v("JUMPSUB")]),e._v(" versus is justified by needing only to push the return address on the return stack and decode the immediate two byte destination to the "),s("code",[e._v("PC")]),e._v(", and the "),s("em",[e._v("verylow")]),e._v(" cost of "),s("code",[e._v("RETURNSUB")]),e._v(" is justified by needing only to pop the return stack into the "),s("code",[e._v("PC")]),e._v(".  The "),s("em",[e._v("low")]),e._v(" cost of "),s("code",[e._v("RJUMP")]),e._v(" is justified by needing even less work than "),s("code",[e._v("JUMPSUB")]),e._v(", and the cost of "),s("code",[e._v("RJUMPI")]),e._v(" is "),s("code",[e._v("mid")]),e._v(" because of the extra work to test the conditional. "),s("code",[e._v("RJUMPV")]),e._v(" is at least as costly as "),s("code",[e._v("RJUMPI")]),e._v(", with extra work for each "),s("code",[e._v("offset")]),e._v(".   Benchmarking will be needed to tell if the costs are well-balanced.")]),e._v(" "),s("h3",{attrs:{id:"validity"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#validity"}},[e._v("#")]),e._v(" Validity")]),e._v(" "),s("p",[e._v("We define safety here as avoiding exceptional halting states:")]),e._v(" "),s("ul",[s("li",[e._v("Valid contracts will not halt with an exception unless they\n"),s("ul",[s("li",[e._v("run out of gas or")]),e._v(" "),s("li",[e._v("overflow stack while making a recursive subroutine call.")])])])]),e._v(" "),s("p",[e._v("Attempts to create contracts that cannot be proven to be valid will fail.")]),e._v(" "),s("h4",{attrs:{id:"exceptional-halting-states"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exceptional-halting-states"}},[e._v("#")]),e._v(" Exceptional Halting States")]),e._v(" "),s("p",[s("em",[e._v("Execution")]),e._v(" is as defined in the "),s("a",{attrs:{href:"https://ethereum.github.io/yellowpaper/paper.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Yellow Paper"),s("OutboundLink")],1),e._v("  a sequence of changes to the EVM state.  The conditions on valid "),s("em",[e._v("code")]),e._v(" are preserved by state changes.  At runtime, if execution of an instruction would violate a condition the execution is in an exceptional halting state.  The Yellow Paper defines five such states.")]),e._v(" "),s("ol",[s("li",[e._v("Insufficient gas")]),e._v(" "),s("li",[e._v("More than 1024 stack items")]),e._v(" "),s("li",[e._v("Insufficient stack items")]),e._v(" "),s("li",[e._v("Invalid jump destination")]),e._v(" "),s("li",[e._v("Invalid instruction")])]),e._v(" "),s("p",[e._v("We would like to consider EVM "),s("em",[e._v("code")]),e._v(" valid iff no execution of the program can lead to an exceptional halting state, but we must be able to validate "),s("em",[e._v("code")]),e._v(" in linear time to avoid denial of service attacks.  So in practice, we can only partially meet these requirements.  Our validation rules do not consider the "),s("em",[e._v("code's")]),e._v(" data and computations, only its control flow and stack use.  This means we will reject programs with any invalid "),s("em",[e._v("code")]),e._v(" paths, even if those paths are not reachable at runtime.")]),e._v(" "),s("h3",{attrs:{id:"validation-rules"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#validation-rules"}},[e._v("#")]),e._v(" Validation Rules")]),e._v(" "),s("blockquote",[s("p",[e._v("This section extends the contact creation validation rules (as defined in EIP-3540 and EIP-3670.)")])]),e._v(" "),s("ol",{attrs:{start:"0"}},[s("li",[e._v("Deprecate or restrict "),s("code",[e._v("JUMP")]),e._v(" and "),s("code",[e._v("JUMPI")]),e._v(".")]),e._v(" "),s("li",[e._v("Every "),s("code",[e._v("RJUMP")]),e._v(", "),s("code",[e._v("RJUMPI")]),e._v(", and "),s("code",[e._v("RJUMPV")]),e._v(" addresses only valid "),s("code",[e._v("JUMPDEST")]),e._v("s.")]),e._v(" "),s("li",[e._v("The "),s("code",[e._v("stack depth")]),e._v(" is\n"),s("ul",[s("li",[e._v("always positive and")]),e._v(" "),s("li",[e._v("the same on every path through an opcode.")])])]),e._v(" "),s("li",[e._v("The number of items on the "),s("code",[e._v("data stack")]),e._v(" and on the "),s("code",[e._v("return stack")]),e._v(" is at most 1024.")])]),e._v(" "),s("p",[e._v("The Yellow Paper has the "),s("code",[e._v("stack pointer")]),e._v(" ("),s("code",[e._v("SP")]),e._v(") pointing just past the top item on the "),s("code",[e._v("data stack")]),e._v(".   We define the "),s("code",[e._v("stack base")]),e._v(" ("),s("code",[e._v("BP")]),e._v(")as the element that the "),s("code",[e._v("SP")]),e._v(" addressed at the entry to the current "),s("em",[e._v("basic block")]),e._v(", or "),s("code",[e._v("0")]),e._v(" on program entry, and the "),s("code",[e._v("stack depth")]),e._v(" as the number of stack elements between the current "),s("code",[e._v("SP")]),e._v(" and the current "),s("code",[e._v("BP")]),e._v(".")]),e._v(" "),s("p",[e._v("Taken together, these rules allow for code to be validated by traversing the control-flow graph, following each edge only once.")]),e._v(" "),s("p",[s("em",[e._v("Note that this specification is entirely semantic.  It constrains only data usage and control flow and imposes no syntax on code beyond being a sequence of bytes to be executed.")])]),e._v(" "),s("h2",{attrs:{id:"rationale"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rationale"}},[e._v("#")]),e._v(" Rationale")]),e._v(" "),s("p",[e._v('This is a simple two-stack design – the data stack is supplemented with a return stack to support jumping to and returning from subroutines, as specified above, and as conceptualized by Turing.  The return address (Turing\'s "note") is pushed onto the return stack (Turing\'s "delay line") when calling, and the \''),s("code",[e._v("PC")]),e._v("' is popped off of the "),s("code",[e._v("PC")]),e._v(" when returning.")]),e._v(" "),s("p",[e._v("The alternative design is to push the return address and the destination address on the data stack before jumping to the subroutine, and to later jump back to the return address on the stack in order to return.  This is the current approach.  It could be streamlined to some extent by having JUMPSUB push the return address for RETURNSUB to pop.")]),e._v(" "),s("p",[e._v("We prefer the separate return stack because it maintains a clear separation between data and flow of control.  This ensures that the return address cannot be overwritten or mislaid.  It also reduces costs by using fewer data stack slots and moving less data.")]),e._v(" "),s("h2",{attrs:{id:"backwards-compatibility"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#backwards-compatibility"}},[e._v("#")]),e._v(" Backwards Compatibility")]),e._v(" "),s("p",[e._v("These changes affect the semantics of existing EVM code.  These changes are compatible with the restricted forms of "),s("code",[e._v("JUMP")]),e._v(" and "),s("code",[e._v("JUMPI")]),e._v(" specified by "),s("RouterLink",{attrs:{to:"/zh/eip-3779.html"}},[e._v("EIP-3779")]),e._v("  -- contracts following all of the rules given there and here will be valid.")],1),e._v(" "),s("h2",{attrs:{id:"test-cases"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#test-cases"}},[e._v("#")]),e._v(" Test Cases")]),e._v(" "),s("h3",{attrs:{id:"simple-routine"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#simple-routine"}},[e._v("#")]),e._v(" Simple routine")]),e._v(" "),s("p",[e._v("This should jump into a subroutine, back out and stop.")]),e._v(" "),s("p",[e._v("Bytecode: "),s("code",[e._v("0x60045e005b5d")]),e._v(" ("),s("code",[e._v("PUSH1 0x04, JUMPSUB, STOP, JUMPDEST, RETURNSUB")]),e._v(")")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("Pc")]),e._v(" "),s("th",[e._v("Op")]),e._v(" "),s("th",[e._v("Cost")]),e._v(" "),s("th",[e._v("Stack")]),e._v(" "),s("th",[e._v("RStack")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("0")]),e._v(" "),s("td",[e._v("JUMPSUB")]),e._v(" "),s("td",[e._v("5")]),e._v(" "),s("td",[e._v("[]")]),e._v(" "),s("td",[e._v("[]")])]),e._v(" "),s("tr",[s("td",[e._v("3")]),e._v(" "),s("td",[e._v("RETURNSUB")]),e._v(" "),s("td",[e._v("5")]),e._v(" "),s("td",[e._v("[]")]),e._v(" "),s("td",[e._v("[0]")])]),e._v(" "),s("tr",[s("td",[e._v("4")]),e._v(" "),s("td",[e._v("STOP")]),e._v(" "),s("td",[e._v("0")]),e._v(" "),s("td",[e._v("[]")]),e._v(" "),s("td",[e._v("[]")])])])]),e._v(" "),s("p",[e._v("Output: 0x Consumed gas: "),s("code",[e._v("10")])]),e._v(" "),s("h3",{attrs:{id:"two-levels-of-subroutines"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#two-levels-of-subroutines"}},[e._v("#")]),e._v(" Two levels of subroutines")]),e._v(" "),s("p",[e._v("This should execute fine, going into one two depths of subroutines")]),e._v(" "),s("p",[e._v("Bytecode: "),s("code",[e._v("0x6800000000000000000c5e005b60115e5d5b5d")]),e._v(" ("),s("code",[e._v("PUSH9 0x00000000000000000c, JUMPSUB, STOP, JUMPDEST, PUSH1 0x11, JUMPSUB, RETURNSUB, JUMPDEST, RETURNSUB")]),e._v(")")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("Pc")]),e._v(" "),s("th",[e._v("Op")]),e._v(" "),s("th",[e._v("Cost")]),e._v(" "),s("th",[e._v("Stack")]),e._v(" "),s("th",[e._v("RStack")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("0")]),e._v(" "),s("td",[e._v("JUMPSUB")]),e._v(" "),s("td",[e._v("5")]),e._v(" "),s("td",[e._v("[]")]),e._v(" "),s("td",[e._v("[]")])]),e._v(" "),s("tr",[s("td",[e._v("3")]),e._v(" "),s("td",[e._v("JUMPSUB")]),e._v(" "),s("td",[e._v("5")]),e._v(" "),s("td",[e._v("[]")]),e._v(" "),s("td",[e._v("[0]")])]),e._v(" "),s("tr",[s("td",[e._v("4")]),e._v(" "),s("td",[e._v("RETURNSUB")]),e._v(" "),s("td",[e._v("5")]),e._v(" "),s("td",[e._v("[]")]),e._v(" "),s("td",[e._v("[0,3]")])]),e._v(" "),s("tr",[s("td",[e._v("5")]),e._v(" "),s("td",[e._v("RETURNSUB")]),e._v(" "),s("td",[e._v("5")]),e._v(" "),s("td",[e._v("[]")]),e._v(" "),s("td",[e._v("[3]")])]),e._v(" "),s("tr",[s("td",[e._v("6")]),e._v(" "),s("td",[e._v("STOP")]),e._v(" "),s("td",[e._v("0")]),e._v(" "),s("td",[e._v("[]")]),e._v(" "),s("td",[e._v("[]")])])])]),e._v(" "),s("p",[e._v("Consumed gas: "),s("code",[e._v("20")])]),e._v(" "),s("h3",{attrs:{id:"failure-1-invalid-jump"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#failure-1-invalid-jump"}},[e._v("#")]),e._v(" Failure 1: invalid jump")]),e._v(" "),s("p",[e._v("This should fail, since the given location is outside of the code-range. The code is the same as previous example, except that the pushed location is "),s("code",[e._v("0x01000000000000000c")]),e._v(" instead of "),s("code",[e._v("0x0c")]),e._v(".")]),e._v(" "),s("p",[e._v("Bytecode: ("),s("code",[e._v("PUSH9 0x01000000000000000c, JUMPSUB,")]),e._v("0x6801000000000000000c5e005b60115e5d5b5d"),s("code",[e._v(", STOP, JUMPDEST, PUSH1 0x11, JUMPSUB, RETURNSUB, JUMPDEST, RETURNSUB")]),e._v(")")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("Pc")]),e._v(" "),s("th",[e._v("Op")]),e._v(" "),s("th",[e._v("Cost")]),e._v(" "),s("th",[e._v("Stack")]),e._v(" "),s("th",[e._v("RStack")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("0")]),e._v(" "),s("td",[e._v("JUMPSUB")]),e._v(" "),s("td",[e._v("10")]),e._v(" "),s("td",[e._v("[18446744073709551628]")]),e._v(" "),s("td",[e._v("[]")])])])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Error: at pc=10, op=JUMPSUB: invalid jump destination\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h3",{attrs:{id:"failure-2-shallow-return-stack"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#failure-2-shallow-return-stack"}},[e._v("#")]),e._v(" Failure 2: shallow "),s("code",[e._v("return stack")])]),e._v(" "),s("p",[e._v("This should fail at first opcode, due to shallow "),s("code",[e._v("return_stack")])]),e._v(" "),s("p",[e._v("Bytecode: "),s("code",[e._v("0x5d5858")]),e._v(" ("),s("code",[e._v("RETURNSUB, PC, PC")]),e._v(")")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("Pc")]),e._v(" "),s("th",[e._v("Op")]),e._v(" "),s("th",[e._v("Cost")]),e._v(" "),s("th",[e._v("Stack")]),e._v(" "),s("th",[e._v("RStack")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("0")]),e._v(" "),s("td",[e._v("RETURNSUB")]),e._v(" "),s("td",[e._v("5")]),e._v(" "),s("td",[e._v("[]")]),e._v(" "),s("td",[e._v("[]")])])])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Error: at pc=0, op=RETURNSUB: invalid retsub\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h3",{attrs:{id:"subroutine-at-end-of-code"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#subroutine-at-end-of-code"}},[e._v("#")]),e._v(" Subroutine at end of code")]),e._v(" "),s("p",[e._v("In this example. the JUMPSUB is on the last byte of code. When the subroutine returns, it should hit the 'virtual stop' "),s("em",[e._v("after")]),e._v(" the bytecode, and not exit with error")]),e._v(" "),s("p",[e._v("Bytecode: "),s("code",[e._v("0x6005565b5d5b60035e")]),e._v(" ("),s("code",[e._v("PUSH1 0x05, JUMP, JUMPDEST, RETURNSUB, JUMPDEST, PUSH1 0x03, JUMPSUB")]),e._v(")")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("Pc")]),e._v(" "),s("th",[e._v("Op")]),e._v(" "),s("th",[e._v("Cost")]),e._v(" "),s("th",[e._v("Stack")]),e._v(" "),s("th",[e._v("RStack")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("0")]),e._v(" "),s("td",[e._v("PUSH1")]),e._v(" "),s("td",[e._v("3")]),e._v(" "),s("td",[e._v("[]")]),e._v(" "),s("td",[e._v("[]")])]),e._v(" "),s("tr",[s("td",[e._v("2")]),e._v(" "),s("td",[e._v("JUMP")]),e._v(" "),s("td",[e._v("8")]),e._v(" "),s("td",[e._v("[5]")]),e._v(" "),s("td",[e._v("[]")])]),e._v(" "),s("tr",[s("td",[e._v("5")]),e._v(" "),s("td",[e._v("JUMPDEST")]),e._v(" "),s("td",[e._v("1")]),e._v(" "),s("td",[e._v("[]")]),e._v(" "),s("td",[e._v("[]")])]),e._v(" "),s("tr",[s("td",[e._v("6")]),e._v(" "),s("td",[e._v("JUMPSUB")]),e._v(" "),s("td",[e._v("5")]),e._v(" "),s("td",[e._v("[]")]),e._v(" "),s("td",[e._v("[]")])]),e._v(" "),s("tr",[s("td",[e._v("2")]),e._v(" "),s("td",[e._v("RETURNSUB")]),e._v(" "),s("td",[e._v("5")]),e._v(" "),s("td",[e._v("[]")]),e._v(" "),s("td",[e._v("[2]")])]),e._v(" "),s("tr",[s("td",[e._v("7")]),e._v(" "),s("td",[e._v("STOP")]),e._v(" "),s("td",[e._v("0")]),e._v(" "),s("td",[e._v("[]")]),e._v(" "),s("td",[e._v("[]")])])])]),e._v(" "),s("p",[e._v("Consumed gas: "),s("code",[e._v("30")])]),e._v(" "),s("h2",{attrs:{id:"reference-implementation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reference-implementation"}},[e._v("#")]),e._v(" Reference Implementation")]),e._v(" "),s("h3",{attrs:{id:"validation-algorithm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#validation-algorithm"}},[e._v("#")]),e._v(" Validation Algorithm")]),e._v(" "),s("blockquote",[s("p",[e._v("This section specifies an algorithm for checking the above the rules.  Equivalent code must be run at creation time.  We assume that the validation defined in EIP-3540 and EIP-3670 has already run, although in practice the algorithms can be merged.")])]),e._v(" "),s("p",[e._v("The following is a pseudo-Go implementation of an algorithm for enforcing adherence to the above rules.  This algorithm is a symbolic execution of the program that recursively traverses the bytecode, following its control flow and stack use and checking for violations of the rules above.   It uses a stack to track the slots that hold "),s("code",[e._v("PUSHed")]),e._v(" constants, from which it pops the destinations to validate during the analysis.")]),e._v(" "),s("p",[e._v("This algorithm runs in time equal to "),s("code",[e._v("O(vertices + edges)")]),e._v(" in the program's control-flow graph, where edges represent control flow and the vertices represent "),s("em",[e._v("basic blocks")]),e._v(" – thus the algorithm takes time proportional to the size of the bytecode.")]),e._v(" "),s("p",[e._v("For simplicity's sake we assume a few helper functions.")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("advance_pc()")]),e._v(" advances the "),s("code",[e._v("PC")]),e._v(",  skipping any immediate data.")]),e._v(" "),s("li",[s("code",[e._v("imm_data()")]),e._v(" returns immediate data for an instruction.`J")]),e._v(" "),s("li",[s("code",[e._v("valid_jumpdest()")]),e._v(" checks that a jump destination is not in immediate data.")]),e._v(" "),s("li",[s("code",[e._v("remove_items()")]),e._v(" returns the number of items removed from the "),s("code",[e._v("stack")]),e._v(" by an instruction")]),e._v(" "),s("li",[s("code",[e._v("add_items() returns the number of items added to the")]),e._v("stack"),s("code",[e._v(". Items are added as 0xFFFFFFFF. The")]),e._v("PC"),s("code",[e._v(",")]),e._v("PUSH…"),s("code",[e._v(",")]),e._v("SWAP…"),s("code",[e._v(",")]),e._v("DUP…"),s("code",[e._v(",")]),e._v("JUMP"),s("code",[e._v(", and")]),e._v("JUMPI` instructions are handled separately.")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var code  [code_len]byte\nvar depth [code_len]unsigned\nvar sp := 1023            \nvar bp := 1023\n\nfunc validate(pc := 0, depth := 0) boolean {\n\n   for ; pc < code_len; pc = advance_pc(pc) {\n\n      // successful termination\n      switch instruction {\n      case STOP    { return true }\n      case RETURN  { return true }\n      case SUICIDE { return true }\n      }\n\n      // check for stack underflow and overflow\n      depth := bp - sp\n      if depth < 0 || sp < 0 || 1024 < sp {\n         return false\n      }\n\n      // if stack depth for `pc` is non-zero we have been here before \n      // so return to break cycle in control flow graph\n      if depth[pc] != 0 {\n          if depth[pc] != depth {\n             return false\n          }\n          return true\n      }\n      depth[pc] = depth\n\n      if (instruction == RJUMP) {\n\n         // check for valid destination\n         jumpdest = pc + imm_data(pc)\n         if !valid_jumpdest(jumpdest) {\n            return false\n         }\n\n         // will enter basic block at destination\n         bp = sp\n\n         // reset pc to destination of jump \n         pc = jumpdest\n         continue\n      }\n      if (instruction == RJUMPV {\n\n         // check for valid destination\n         n = imm_data(pc += 2)\n         for i := 0; i < n; n-- {\n            jumpdest = pc + n + imm_data(pc)\n            if !valid_jumpdest(jumpdest) {\n               return false\n            }\n            // recurse to jump to code to validate\n            if !validate(jumpdest) {\n               return false\n            }\n         }\n         // false side of conditional\n\n         // enter basic block \n         bp = sp\n         continue\n      }\n      if (instruction == JUMPDEST) {\n\n         // enter basic block \n         bp = sp\n          continue\n     }\n\n      // apply other instructions to stack\n      sp += remove_items(pc)\n      sp -= add_items(pc)\n   }\n\n   // successful termination\n   return true\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br"),s("span",{staticClass:"line-number"},[e._v("38")]),s("br"),s("span",{staticClass:"line-number"},[e._v("39")]),s("br"),s("span",{staticClass:"line-number"},[e._v("40")]),s("br"),s("span",{staticClass:"line-number"},[e._v("41")]),s("br"),s("span",{staticClass:"line-number"},[e._v("42")]),s("br"),s("span",{staticClass:"line-number"},[e._v("43")]),s("br"),s("span",{staticClass:"line-number"},[e._v("44")]),s("br"),s("span",{staticClass:"line-number"},[e._v("45")]),s("br"),s("span",{staticClass:"line-number"},[e._v("46")]),s("br"),s("span",{staticClass:"line-number"},[e._v("47")]),s("br"),s("span",{staticClass:"line-number"},[e._v("48")]),s("br"),s("span",{staticClass:"line-number"},[e._v("49")]),s("br"),s("span",{staticClass:"line-number"},[e._v("50")]),s("br"),s("span",{staticClass:"line-number"},[e._v("51")]),s("br"),s("span",{staticClass:"line-number"},[e._v("52")]),s("br"),s("span",{staticClass:"line-number"},[e._v("53")]),s("br"),s("span",{staticClass:"line-number"},[e._v("54")]),s("br"),s("span",{staticClass:"line-number"},[e._v("55")]),s("br"),s("span",{staticClass:"line-number"},[e._v("56")]),s("br"),s("span",{staticClass:"line-number"},[e._v("57")]),s("br"),s("span",{staticClass:"line-number"},[e._v("58")]),s("br"),s("span",{staticClass:"line-number"},[e._v("59")]),s("br"),s("span",{staticClass:"line-number"},[e._v("60")]),s("br"),s("span",{staticClass:"line-number"},[e._v("61")]),s("br"),s("span",{staticClass:"line-number"},[e._v("62")]),s("br"),s("span",{staticClass:"line-number"},[e._v("63")]),s("br"),s("span",{staticClass:"line-number"},[e._v("64")]),s("br"),s("span",{staticClass:"line-number"},[e._v("65")]),s("br"),s("span",{staticClass:"line-number"},[e._v("66")]),s("br"),s("span",{staticClass:"line-number"},[e._v("67")]),s("br"),s("span",{staticClass:"line-number"},[e._v("68")]),s("br"),s("span",{staticClass:"line-number"},[e._v("69")]),s("br"),s("span",{staticClass:"line-number"},[e._v("70")]),s("br"),s("span",{staticClass:"line-number"},[e._v("71")]),s("br"),s("span",{staticClass:"line-number"},[e._v("72")]),s("br"),s("span",{staticClass:"line-number"},[e._v("73")]),s("br"),s("span",{staticClass:"line-number"},[e._v("74")]),s("br"),s("span",{staticClass:"line-number"},[e._v("75")]),s("br"),s("span",{staticClass:"line-number"},[e._v("76")]),s("br"),s("span",{staticClass:"line-number"},[e._v("77")]),s("br"),s("span",{staticClass:"line-number"},[e._v("78")]),s("br"),s("span",{staticClass:"line-number"},[e._v("79")]),s("br"),s("span",{staticClass:"line-number"},[e._v("80")]),s("br"),s("span",{staticClass:"line-number"},[e._v("81")]),s("br"),s("span",{staticClass:"line-number"},[e._v("82")]),s("br")])]),s("h2",{attrs:{id:"security-considerations"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#security-considerations"}},[e._v("#")]),e._v(" Security Considerations")]),e._v(" "),s("p",[e._v("These changes do introduce new flow control instructions, so any software which does static/dynamic analysis of EVM code needs to be modified accordingly. The "),s("code",[e._v("JUMPSUB")]),e._v(" semantics are similar to "),s("code",[e._v("JUMP")]),e._v(" whereas the "),s("code",[e._v("RETURNSUB")]),e._v(" instruction is different, since it can 'land' on any opcode (but the possible destinations can be statically inferred).")]),e._v(" "),s("p",[e._v("The validation algorithm must run in time and space near-linear in the size of its input so that a it can be charged appropriate gas to avoid DoS attack.  "),s("code",[e._v("RJUMPV")]),e._v(" takes its arguments inline so that attempts to attack the validation algorithm will fail by reducing the space available to attack it in.")]),e._v(" "),s("h2",{attrs:{id:"copyright"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),s("p",[e._v("Copyright and related rights waived via "),s("a",{attrs:{href:"https://creativecommons.org/publicdomain/zero/1.0/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CC0"),s("OutboundLink")],1),e._v(".")])])}),[],!1,null,null,null);t.default=n.exports}}]);