(window.webpackJsonp=window.webpackJsonp||[]).push([[326],{729:function(e,t,a){"use strict";a.r(t);var i=a(46),s=Object(i.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"simple-summary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#simple-summary"}},[e._v("#")]),e._v(" Simple Summary")]),e._v(" "),a("p",[e._v("An opcode for getting the median gas price of the parent block.")]),e._v(" "),a("h2",{attrs:{id:"abstract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),a("p",[e._v("Adds "),a("code",[e._v("MEDGASPRICE (0x46)")]),e._v(" opcode that returns the median gas price for the parent block.")]),e._v(" "),a("h2",{attrs:{id:"motivation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),a("p",[e._v("With the emergence of rollups as core mechanisms in scaling Ethereum there are a number of common transactions that can be front-run. Optimistic rollups rely on the submission of fraud proofs to maintain the integrity of their systems. As a result actors submitting fraud proofs typically receive a financial reward for doing so. This opens a trivial front-running strategy of watching the mempool for fraud proof submissions and copying such transactions with a much higher gas price to reap the reward. Such front-runners do not perform validation independently and de-incentivize others from performing validation. Adding a mechanism enforcing an upper bound on gas prices for a transaction could be an effective defense against such front-running attacks.")]),e._v(" "),a("p",[e._v("Consider a smart contract that wants to implement a first come first serve mechanism. Such a mechanism must defeat the inherently pay-to-win nature of the gas price market. Enforcing a maximum gas price for a transaction relies on the fact that transactions of the same gas price are generally processed in a first in first out way by Ethereum miners. A contract currently has few options for setting a max gas price:")]),e._v(" "),a("ul",[a("li",[e._v("Set a constant value at a reasonable rate given the current gas prices")]),e._v(" "),a("li",[e._v("Allow an individual or group of individuals to adjust a max gas price over time")])]),e._v(" "),a("p",[e._v("More elaborate schemes could likely be constructed but all would involve storing gas price information on chain increasing the number of transactions and costing Ether.")]),e._v(" "),a("p",[e._v("Given a median gas price opcode a contract can set a maximum gas price as a function of the last blocks gas price. This can easily be implemented using a strategy such as the following:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Assume that block.medgasprice is bound to MEDGASPRICE (0x46)\n\nfunction submitFraudProof(bytes calldata proof) public {\n  require(tx.gasprice <= maxGasPrice());\n  // process the fraud proof and provide a reward (if valid)\n}\n\nfunction maxGasPrice() public view returns (uint) {\n  return 3 * block.medgasprice;\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br")])]),a("p",[e._v("Given the contract implementation above a client would simply call "),a("code",[e._v("maxGasPrice")]),e._v(" to determine the gas price to use when submitting a fraud proof. This particular implementation allows up to 3x the median gas price of the last block to be used.")]),e._v(" "),a("h3",{attrs:{id:"forwards-compatibility"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#forwards-compatibility"}},[e._v("#")]),e._v(" Forwards Compatibility")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://eips.ethereum.org/EIPS/eip-1559",target:"_blank",rel:"noopener noreferrer"}},[e._v("EIP-1559"),a("OutboundLink")],1),e._v(' plans to change the fee market in a number of ways. Most notably is the creation of a base fee that is burned. In this context an "inclusion fee" still exists as a part of the total fee. Consider the following two cases:')]),e._v(" "),a("h4",{attrs:{id:"block-sizes-are-increasing-all-available-gas-is-being-consumed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#block-sizes-are-increasing-all-available-gas-is-being-consumed"}},[e._v("#")]),e._v(" Block sizes are increasing (all available gas is being consumed)")]),e._v(" "),a("p",[e._v("In this case there will be bidding contention in the inclusion fee to incentivize miners to include transactions. A median gas price operator would still be helpful as an attacker could supply a high inclusion fee to bump honest transactions.")]),e._v(" "),a("h4",{attrs:{id:"block-sizes-are-decreasing-excess-gas-is-available"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#block-sizes-are-decreasing-excess-gas-is-available"}},[e._v("#")]),e._v(" Block sizes are decreasing (excess gas is available)")]),e._v(" "),a("p",[e._v("In this case an attacker could specify a high inclusion fee to incentivize miners to include their transaction early in the block. Miners are incentivized to do so as including expensive transactions first reduces the risk of a revert (and partial refund) occurring.")]),e._v(" "),a("p",[e._v("Given these two cases this EIP seems relevant in the context of EIP-1559.")]),e._v(" "),a("p",[e._v("Post EIP-1559 "),a("code",[e._v("MEDGASPRICE (0x46)")]),e._v(" should return the median "),a("code",[e._v("effective_gas_price")]),e._v(" of the previous block.")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://eips.ethereum.org/EIPS/eip-3198",target:"_blank",rel:"noopener noreferrer"}},[e._v("EIP-3198"),a("OutboundLink")],1),e._v(" is required for the above strategies to be implemented. With the inclusion of "),a("code",[e._v("BASEFEE (0x48)")]),e._v(" a contract can subtract the "),a("code",[e._v("base_fee_per_gas")]),e._v(" from the "),a("code",[e._v("effective_gas_price")]),e._v(" to determine the inclusion fee per gas being paid for the transaction and thus implement an upper bound.")]),e._v(" "),a("h2",{attrs:{id:"specification"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),a("p",[e._v("If "),a("code",[e._v("block.number >= TBD")]),e._v(", add a new opcode "),a("code",[e._v("MEDGASPRICE (0x46)")]),e._v(":")]),e._v(" "),a("p",[e._v("Pushes the median gas price of the parent block onto the stack.")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[e._v("Op")]),e._v(" "),a("th",{staticStyle:{"text-align":"center"}},[e._v("Input")]),e._v(" "),a("th",{staticStyle:{"text-align":"center"}},[e._v("Output")]),e._v(" "),a("th",{staticStyle:{"text-align":"center"}},[e._v("Cost")])])]),e._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[e._v("0x46")]),e._v(" "),a("td",{staticStyle:{"text-align":"center"}},[e._v("0")]),e._v(" "),a("td",{staticStyle:{"text-align":"center"}},[e._v("1")]),e._v(" "),a("td",{staticStyle:{"text-align":"center"}},[e._v("8")])])])]),e._v(" "),a("h2",{attrs:{id:"rationale"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rationale"}},[e._v("#")]),e._v(" Rationale")]),e._v(" "),a("p",[e._v("Having access to the current gas price economy allows contracts to implement more robust and automated logic surrounding acceptable transaction gas prices.")]),e._v(" "),a("h3",{attrs:{id:"naming-note"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#naming-note"}},[e._v("#")]),e._v(" Naming note")]),e._v(" "),a("p",[e._v("The name "),a("code",[e._v("MEDGASPRICE")]),e._v(" was chosen because the median gas price of the network can only be calculated from the latest complete block. Thus transactions being executed should expect the median gas price to be calculated from the previous block.")]),e._v(" "),a("h2",{attrs:{id:"backwards-compatibility"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#backwards-compatibility"}},[e._v("#")]),e._v(" Backwards Compatibility")]),e._v(" "),a("p",[e._v("There are no known backwards incompabitility issues.")]),e._v(" "),a("h2",{attrs:{id:"security-considerations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#security-considerations"}},[e._v("#")]),e._v(" Security Considerations")]),e._v(" "),a("p",[e._v("The strategy described for preventing front-running by setting an upper bound on the gas price of transactions has a few caveats:")]),e._v(" "),a("ol",[a("li",[e._v("It relies on miners being impartial. Reordering transactions with the same gas price is a trivial means of defeating this strategy.")]),e._v(" "),a("li",[e._v("The value returned by "),a("code",[e._v("MEDGASPRICE (0x46)")]),e._v(" may fluctuate rapidly between blocks. If a transaction is not included immediately it may either fail (if the gas price drops) or become vulnerable to front-running (if the gas price increases).")])]),e._v(" "),a("h2",{attrs:{id:"copyright"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),a("p",[e._v("Copyright and related rights waived via "),a("a",{attrs:{href:"https://creativecommons.org/publicdomain/zero/1.0/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CC0"),a("OutboundLink")],1),e._v(".")])])}),[],!1,null,null,null);t.default=s.exports}}]);