(window.webpackJsonp=window.webpackJsonp||[]).push([[727],{1152:function(e,n,s){"use strict";s.r(n);var t=s(46),a=Object(t.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"simple-summary"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#simple-summary"}},[e._v("#")]),e._v(" Simple Summary")]),e._v(" "),s("p",[e._v("A standard interface for contract, that manage multiple callable bonds. A single contract includes any given number of bond classes, bond nonce, bond balance of an address. This standard provides independent functions to read, transfer any collection of bonds, as well as allow bonds to be redeemed from the bond issuer if certain conditions are met. This token standard can replace current ERC-20 LP token. ERC-659 has more complex data structure, which will allow the LP token to store more information, and allow the developer to build more sophisticated logic for the redemption and reward system of the defi project in question.")]),e._v(" "),s("h2",{attrs:{id:"abstract"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),s("p",[e._v("This API standard allows for the creation of any number of bonds type in a single contract. Existing LP token standards like ERC-20 require deployment of separate factory and token contracts per token type. The need of issuing bonds with multiple redemption data can’t be achieved with existing token standards. ERC-659 Multiple Callable Bonds Standard allows for each bond class ID to represent a new configurable token type, and for each bond nonce to represent an issuing date or any other forms of data in uint256. Every single nonce of a bond class may have its own metadata, supply and other redemption conditions.")]),e._v(" "),s("h2",{attrs:{id:"motivation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),s("p",[e._v("Current LP token is a simple ERC-20 token, which has not much complicity in data structure. To allow more complex reward and redemption logic to be built, we need a new LP token standard that can manage multiple bonds, stores much more data and gas efficient. ERC-659 standard interface allows any tokens on solidity compatible block chains to create its own bond. These bonds with the same interface standard can be exchanged in secondary market. And it allows any 3rd party wallet applications or exchanges to read the balance and the redemption conditions of these tokens. ERC-659 bonds can also be packed into separate packages. Those packages can in their turn be divided and exchanged in a secondary market.")]),e._v(" "),s("p",[e._v("New functions built in ERC-659 Multiple Callable Bonds Standard, will allow the users to economize their gas fee spend. Trading and burning of ERC-659 Bonds will also multiply tokens market cap, helping it to recover from recession period"),s("a",{attrs:{href:"https://medium.com/coinmonks/the-future-of-algorithmic-stable-coin-13ddbc27485",target:"_blank",rel:"noopener noreferrer"}},[e._v("(1)"),s("OutboundLink")],1),e._v(". Existing structures, such as AMM exchanges or lending platform can be updated to recognize ERC-659 Bonds.")]),e._v(" "),s("h2",{attrs:{id:"specification"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),s("div",{staticClass:"language-solidity line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-solidity"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("pragma")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("solidity")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("^")]),s("span",{pre:!0,attrs:{class:"token version number"}},[e._v("0.6.2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'@sgmfinance/erc-659/blob/main/contracts/util/IERC659.sol'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h5",{attrs:{id:"totalsupply"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#totalsupply"}},[e._v("#")]),e._v(" totalSupply()")]),e._v(" "),s("p",[s("code",[e._v('"totalSupply()"')]),e._v(" allows anyone to read the total supply of a given class nonce and bond nonce, this include burned and redeemed Supply")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"class"')]),e._v(" is the class nonce of bond, the first bond class created will be 0, and so on.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"nonce"')]),e._v(" is the nonce of the bond. This param is for distinctions of the issuing conditions of the bond.")]),e._v(" "),s("p",[e._v("Returns the active supply of the bond in question. — e.g. "),s("code",[e._v('"5821200000000"')]),e._v(".")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function totalSupply( uint256 class, uint256 nonce) external view returns (uint256);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("strong",[e._v("activeSupply()")])]),e._v(" "),s("p",[s("code",[e._v('"activeSupply()"')]),e._v(" allows anyone to read the non-burned and non-redeemed Supply of a given class nonce and bond nonce.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"class"')]),e._v(" is the class nonce of bond, the first bond class created will be 0, and so on.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"nonce"')]),e._v(" is the nonce of the bond. This param is for distinctions of the issuing conditions of the bond.")]),e._v(" "),s("p",[e._v("Returns the active supply of the bond in question. — e.g. "),s("code",[e._v('"5821200000000"')]),e._v(".")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function activeSupply( uint256 class, uint256 nonce) external view returns (uint256);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h5",{attrs:{id:"burnedsupply"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#burnedsupply"}},[e._v("#")]),e._v(" burnedSupply()")]),e._v(" "),s("p",[s("code",[e._v('"burnedSupply()"')]),e._v(" allows anyone to read the redeemed Supply of a given class and bond nonce.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"class"')]),e._v(" is the class nonce of bond, the first bond class created will be 0, and so on.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"nonce"')]),e._v(" is the nonce of the bond. This param is for distinctions of the issuing conditions of the bond.")]),e._v(" "),s("p",[e._v("Returns the active supply of the bond in question. — e.g. "),s("code",[e._v('"612300000000"')]),e._v(".")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function burnedSupply( uint256 class, uint256 nonce) external view returns (uint256);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h5",{attrs:{id:"redeemedsupply"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redeemedsupply"}},[e._v("#")]),e._v(" redeemedSupply**()**")]),e._v(" "),s("p",[s("code",[e._v('"redeemedSupply()"')]),e._v(" allows anyone to read the redeemed Supply of a given class and bond nonce.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"class"')]),e._v(" is the class nonce of bond, the first bond class created will be 0, and so on.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"nonce"')]),e._v(" is the nonce of the bond. This param is for distinctions of the issuing conditions of the bond.")]),e._v(" "),s("p",[e._v("Returns the active supply of the bond in question. — e.g. "),s("code",[e._v('"612300000000"')]),e._v(".")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function redeemedSupply( uint256 class, uint256 nonce) external view returns (uint256);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h5",{attrs:{id:"balanceof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#balanceof"}},[e._v("#")]),e._v(" balanceOf()")]),e._v(" "),s("p",[s("code",[e._v('"balanceOf()"')]),e._v(" allows anyone to read the remaining balance of an address. This will only return the balance of a single bond class and bond date nonce.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"account"')]),e._v(" is the address of the token holder.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"class"')]),e._v(" is the class nonce of bond, the first bond class created will be 0, and so on.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"nonce"')]),e._v(" is the nonce of the bond. This param is for distinctions of the issuing conditions of the bond.")]),e._v(" "),s("p",[e._v("Returns the balance of the giving bond class and bond nonce. — e.g. "),s("code",[e._v('"571300000000"')]),e._v(".")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function balanceOf(address account, uint256 class, uint256 nonce) external view returns (uint256);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h5",{attrs:{id:"getbondsymbol"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getbondsymbol"}},[e._v("#")]),e._v(" getBondSymbol()")]),e._v(" "),s("p",[s("code",[e._v('"getBondSymbol()"')]),e._v(" allows anyone to read the symbol of a bond class.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"class"')]),e._v(" is the class nonce of bond, the first bond class created will be 0, and so on.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"nonce"')]),e._v(" is the nonce of the bond. This param is for distinctions of the issuing conditions of the bond.")]),e._v(" "),s("p",[e._v("Returns the symbol string of the bond class. — e.g. bond symbol="),s("code",[e._v('"SASH-BUSD bond"')]),e._v(".**"),s("em",[e._v("SASH as the first half of the bond symbol represents the settlement token of the bond. BUSD as the second half of the bond symbol represents the token used for the perches of this bond. If the bond have more than one settlement token or buying token, the symbol should be")]),e._v(" "),s("code",[e._v('"Token1,Token2-Token3,Token4 bond"')])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function getBondSymbol(uint256 class) external view returns (uint256);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h5",{attrs:{id:"getbondinfo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getbondinfo"}},[e._v("#")]),e._v(" getBondInfo()")]),e._v(" "),s("p",[s("code",[e._v('"getBondInfo()"')]),e._v(" allows anyone to read the information of a bond nonce.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"class"')]),e._v(" is the class nonce of bond, the first bond class created will be 0, and so on.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"nonce"')]),e._v(" is the nonce of the bond. This param is for distinctions of the issuing conditions of the bond.")]),e._v(" "),s("p",[e._v("Returns the bond symbol and a list of uint256 parameters of a bond nonce. — e.g. "),s("code",[e._v('["SASH-BUSD","1615584000",(3rd uint256)...]')]),e._v(".*** Every bond contract can have their own list. But the first uint256 in the list MUST be the UTC time code of the issuing time.*")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function getBondInfo(uint256 class, uint256 nonce) external view returns (string memory BondSymbol, uint256 timestamp, uint256 info2, uint256 info3, uint256 info4, uint256 info5,uint256 info6);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h5",{attrs:{id:"bondisredeemable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bondisredeemable"}},[e._v("#")]),e._v(" "),s("strong",[e._v("bondIsRedeemable()")])]),e._v(" "),s("p",[s("code",[e._v('"bondIsRedeemble()"')]),e._v(" allows anyone to check if a bond is redeemable.*** the conditions of redemption can be speechified with one or several internal functions.*")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"class"')]),e._v(" is the class nonce of bond, the first bond class created will be 0, and so on.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"nonce"')]),e._v(" is the nonce of the bond. This param is for distinctions of the issuing conditions of the bond.")]),e._v(" "),s("p",[e._v("Returns "),s("code",[e._v('"true"')]),e._v(" if the cited bond is redeemable. and "),s("code",[e._v('"false"')]),e._v("if is not.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function bondIsRedeemable(uint256 class, uint256 nonce) external view returns (bool);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h5",{attrs:{id:"issuebond"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#issuebond"}},[e._v("#")]),e._v(" issueBond()")]),e._v(" "),s("p",[s("code",[e._v('"issueBond()"')]),e._v(" allows issuing any number of bond types to an address.")]),e._v(" "),s("p",[e._v("The calling of this function needs to be restricted to bond issuer contract.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"_to"')]),e._v(" is the address to which the bond will be issued.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"class"')]),e._v(" is the class nonce of bond, the first bond class created will be 0, and so on.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"_amount"')]),e._v(" is the amount of the bond, that "),s("code",[e._v('"_to"')]),e._v(" address will receive.")]),e._v(" "),s("p",[e._v("e.g.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("issueBond(0x2d03B6C79B75eE7aB35298878D05fe36DC1fE8Ef,0,1000);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v('those input mean“ issuing to wallet address, 1000of bond class 0." Returns a bool.')]),e._v(" "),s("p",[s("code",[e._v('"true"')]),e._v(" if the bond are issued. and "),s("code",[e._v('"false"')]),e._v("if are not.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" function issueBond(address _to, uint256 class, uint256 _amount) external returns(bool);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h5",{attrs:{id:"redeembond"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redeembond"}},[e._v("#")]),e._v(" redeemBond()")]),e._v(" "),s("p",[s("code",[e._v('"redeemBond()"')]),e._v(" allows redemption of any number of bond types from an address.")]),e._v(" "),s("p",[e._v("The calling of this function needs to be restricted to bond issuer contract.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"_from"')]),e._v(" is the address from which the bond will be redeemed.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"class"')]),e._v(" is the class nonce of bond, the first bond class created will be 0, and so on.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"nonce"')]),e._v(" is the list of nonce of the given bond class. This param is for distinctions of the issuing conditions of the bond.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"_amount"')]),e._v(" is the list of amount of the bond, that "),s("code",[e._v('"_from"')]),e._v(" address will redeem.")]),e._v(" "),s("p",[e._v("e.g.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("redeemBond(0x2d03B6C79B75eE7aB35298878D05fe36DC1fE8Ef, [1,2,4], [42,61,25][500000000,60000000,150000000]);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("those input mean “redeem from wallet address(0x2d03B6C79B75eE7aB35298878D05fe36DC1fE8Ef), 500000000 of bond class1 nonce 42, 60000000 of bond class2 nonce 61, 150000000 of bond class3 nonce 25.")]),e._v(" "),s("p",[e._v("Returns a bool")]),e._v(" "),s("p",[s("code",[e._v('"true"')]),e._v(" if the bond are redeemed and "),s("code",[e._v('"false"')]),e._v("if are not.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function redeemBond(address _from, uint256 class, uint256[] calldata nonce, uint256[] calldata _amount) external returns(bool);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h5",{attrs:{id:"transferbond"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#transferbond"}},[e._v("#")]),e._v(" transferBond()")]),e._v(" "),s("p",[s("code",[e._v('"transferBond()"')]),e._v(" allows the transfer of any number of bond types from an address to another.")]),e._v(" "),s("p",[e._v("The"),s("code",[e._v('"_from"')]),e._v(" argument is the address of the holder whose balance about to decrees.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"_to"')]),e._v(" argument is the address of the recipient whose balance is about to increased.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"class"')]),e._v(" is the list of class nonce of bond, the first bond class created will be 0, and so on.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"nonce"')]),e._v(" is the list of nonce of the given bond class. This param is for distinctions of the issuing conditions of the bond.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"_amount"')]),e._v(" is the list of amount of the bond, that will be transferred from "),s("code",[e._v('"_from"')]),e._v("address to "),s("code",[e._v('"_to"')]),e._v(" address.")]),e._v(" "),s("p",[e._v("e.g.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("transferBond(0x2d03B6C79B75eE7aB35298878D05fe36DC1fE8Ef,0x82a55a613429Aeb3D01fbE6841bE1AcA4fFD5b2B, [1,2,4], [42,61,25], [500000000,60000000,150000000]);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("those input mean “ transfer, from "),s("code",[e._v('"_from"')]),e._v(" address, to "),s("code",[e._v('"_to"')]),e._v(" address, 500000000 of bond class1 nonce 42, 60000000 of bond class2 nonce 61, 150000000 of bond class3 nonce 25.")]),e._v(" "),s("p",[e._v("Returns a bool.")]),e._v(" "),s("p",[s("code",[e._v('"true"')]),e._v("if passed.")]),e._v(" "),s("p",[e._v("**"),s("em",[e._v("If one transaction in the group is failed the function will revert all passed transactions.")]),e._v(" *")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function transferBond(address _from, address _to, uint256[] calldata class, uint256[] calldata nonce, uint256[] calldata _amount) external returns(bool);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h5",{attrs:{id:"burnbond"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#burnbond"}},[e._v("#")]),e._v(" burnBond()")]),e._v(" "),s("p",[s("code",[e._v('"burnBond()"')]),e._v(" allows the transfer of any number of bond types from an address to another.")]),e._v(" "),s("p",[e._v("The"),s("code",[e._v('"_from"')]),e._v(" argument is the address of the holder whose balance about to decrees.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"class"')]),e._v(" is the list of class nonce of bond, the first bond class created will be 0, and so on.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"nonce"')]),e._v(" is the list of nonce of the given bond class. This param is for distinctions of the issuing conditions of the bond.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v('"_amount"')]),e._v(" is the list of amount of the bond, that will be transferred from "),s("code",[e._v('"_from"')]),e._v("address to "),s("code",[e._v('"_to"')]),e._v(" address.")]),e._v(" "),s("p",[e._v("e.g.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("burnBond(0x82a55a613429Aeb3D01fbE6841bE1AcA4fFD5b2B, [1,2,4],[42,61,25], [500000000,60000000,150000000]);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("those input mean “ burn, from "),s("code",[e._v('"_from"')]),e._v(" address, to "),s("code",[e._v('"_to"')]),e._v(" address, 500000000 of bond class1 nonce 42, 60000000 of bond class2 nonce 61, 150000000 of bond class3 nonce 25.")]),e._v(" "),s("p",[e._v("Returns a bool.")]),e._v(" "),s("p",[s("code",[e._v('"true"')]),e._v("if passed.")]),e._v(" "),s("p",[e._v("**"),s("em",[e._v("If one transaction in the group is failed the function will revert all passed transactions.")]),e._v(" *")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function transferBond(address _from, address _to, uint256[] calldata class, uint256[] calldata nonce, uint256[] calldata _amount) external returns(bool);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h3",{attrs:{id:"data-structure"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#data-structure"}},[e._v("#")]),e._v(" Data structure")]),e._v(" "),s("div",{staticClass:"language-solidity line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-solidity"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("pragma")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("solidity")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("^")]),s("span",{pre:!0,attrs:{class:"token version number"}},[e._v("0.6.2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'@sgmfinance/erc-659/blob/main/contracts/ERC659data.sol'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[s("code",[e._v('"_balances"')]),e._v("Is the mapping from bond class and nonce to account balances.")]),e._v(" "),s("p",[e._v("4D array of address => (bond class => (bond nonce => bond balances)).")]),e._v(" "),s("p",[e._v("e.g.")]),e._v(" "),s("p",[e._v("0x2d03B6C79B75eE7aB35298878D05fe36DC1fE8Ef =>(1 =>(5 => 500000000)); this example gives the balance of： address 0x2d03B6C79B75eE7aB35298878D05fe36DC1fE8Ef possess 500000000 of bond class 1, bond nonce 5.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("mapping (address => mapping( uint256 =>mapping(uint256=> uint256))) private _balances;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("code",[e._v('"_totalSupply"')]),e._v("Is the mapping from bond class and nonce to the total active supply.")]),e._v(" "),s("p",[e._v("**"),s("em",[e._v("total supply = total supply +burned supply +redeemed supply.")])]),e._v(" "),s("p",[e._v("3D array of bond class => (bond nonce => bond total supply).")]),e._v(" "),s("p",[s("em",[e._v("e.g.")])]),e._v(" "),s("p",[s("em",[e._v("1 =>(5 => 25000000000); this example gives the total supply of： bond class 1, bond nonce 5 has a total supply of 25000000000 .")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("mapping (uint256 => mapping(uint256 => uint256)) private _activeSupply;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v('"_activeSupply"`Is the mapping from bond class and nonce to the total active supply.')]),e._v(" "),s("p",[e._v("**"),s("em",[e._v("Active supply = total supply - burned supply - redeemed supply.")])]),e._v(" "),s("p",[e._v("3D array of bond class => (bond nonce => bond active supply).")]),e._v(" "),s("p",[s("em",[e._v("e.g.")])]),e._v(" "),s("p",[s("em",[e._v("1 =>(5 => 25000000000); this example gives the total active supply of: bond class 1, bond nonce 5 has a total active supply of 25000000000 .")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("mapping (uint256 => mapping(uint256 => uint256)) private _activeSupply;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("code",[e._v('"_burnedSupply"')]),e._v("Is the mapping from bond class and nonce to the total burned supply.")]),e._v(" "),s("p",[e._v("**"),s("em",[e._v("Burned supply = total supply - active supply - redeemed supply.")])]),e._v(" "),s("p",[e._v("3D array of bond class => (bond nonce => bond burned supply).")]),e._v(" "),s("p",[s("em",[e._v("e.g.")])]),e._v(" "),s("p",[s("em",[e._v("1 =>(5 => 0); this example gives the total burned supply of： bond class 1, bond nonce 5 has a total burned supply of 0 .")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("mapping (uint256 =>  mapping(uint256 => uint256)) private _burnedSupply;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("code",[e._v('"_redeemedSupply"')]),e._v("Is the mapping from bond class and nonce to the total active supply.")]),e._v(" "),s("p",[e._v("*** redeemed supply = total supply - active supply - burned supply.*")]),e._v(" "),s("p",[e._v("3D array of bond class => (bond nonce => bond redeemed supply).")]),e._v(" "),s("p",[s("em",[e._v("e.g.")])]),e._v(" "),s("p",[s("em",[e._v("1 =>(5 => 5000000000); this example gives the total redeemed supply of： bond class 1, bond nonce 5 has a total redeemed supply of 5000000000 .")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("mapping (uint256 =>  mapping(uint256 => uint256)) private _redeemedSupply;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("code",[e._v('"_Symbol"')]),e._v("Is the mapping from bond class to a string of bond symbol.")]),e._v(" "),s("p",[e._v("2D array of bond class => bond symbol.")]),e._v(" "),s("p",[e._v("e.g.")]),e._v(" "),s("p",[e._v("**bond symbol="),s("code",[e._v('"SASH-BUSD bond"')]),e._v(".**"),s("em",[e._v("SASH as the first half of the bond symbol represents the settlement token of the bond. BUSD as the second half of the bond symbol represents the token used for the perches of this bond. If the bond have more than one settlement token or buying token, the symbol should be")]),e._v(" "),s("code",[e._v('"Token1,Token2-Token3,Token4 bond"')])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("mapping ( uint256 =>mapping(uint256=> string[])) private _info;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("code",[e._v('"_info"')]),e._v("Is the mapping from bond class and nonce to a string list of uint256.")]),e._v(" "),s("p",[e._v("3D array of bond class => (bond nonce => bond info).")]),e._v(" "),s("p",[e._v("in this list, [(bond symbol), (timestamp),(3rd string)]")]),e._v(" "),s("p",[e._v("e.g. "),s("code",[e._v('["1615584000",(2nd uint256)...]')])]),e._v(" "),s("p",[e._v("**"),s("em",[e._v("This function allows the return of a list of uint256. every bond contract can have their own list. But the first string in the list MUST be the UTC time code of the issuing time,")])]),e._v(" "),s("p",[e._v("**bond symbol="),s("code",[e._v('"SASH-BUSD bond"')]),e._v(".**"),s("em",[e._v("SASH as the first half of the bond symbol represents the settlement token of the bond. BUSD as the second half of the bond symbol represents the token used for the perches of this bond. If the bond have more than one settlement token or buying token, the symbol should be")]),e._v(" "),s("code",[e._v('"Token1,Token2-Token3,Token4 bond"')])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("mapping ( uint256 =>mapping(uint256=> string[])) private _info;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h3",{attrs:{id:"event"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#event"}},[e._v("#")]),e._v(" EVENT")]),e._v(" "),s("p",[s("code",[e._v('"eventIssueBond"')]),e._v(" MUST trigger when Bonds are issued. This SHOULD not include zero value Issuing.")]),e._v(" "),s("p",[e._v("e.g.")]),e._v(" "),s("p",[s("code",[e._v('"issue by address(operator) 500 SASH-USD Bond(Nonce14) to 0x2d03B6C79B75eE7aB35298878D05fe36DC1fE8Ef"')])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("event eventIssueBond(address _operator, address _to, uint256 class, uint256 nonce, uint256 _amount); \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("code",[e._v('"eventRedeemBond"')]),e._v(" MUST trigger when Bonds are redeemed. This SHOULD not include zero value redemption. When burn a bond MUST not create this event(Use"),s("code",[e._v('"eventBurnBond"')]),e._v(" instead).")]),e._v(" "),s("p",[e._v("e.g.")]),e._v(" "),s("p",[s("code",[e._v('"redeem by address(_operator) 500 SASH-USD Bond(Nonce14) to 0x2d03B6C79B75eE7aB35298878D05fe36DC1fE8Ef"')])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("event eventRedeemBond(address _operator, address _from, uint256 class, uint256 nonce, uint256 _amount);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("code",[e._v('"eventBurnBond"')]),e._v(" MUST trigger when Bonds are burned. This SHOULD not include zero value burning. When redeem a bond MUST not create this event(Use"),s("code",[e._v('"event redeemBond"')]),e._v(" instead).")]),e._v(" "),s("p",[e._v("e.g.")]),e._v(" "),s("p",[s("code",[e._v('"burn by address(_operator) 500 SASH-USD Bond(Nonce14) from 0x2d03B6C79B75eE7aB35298878D05fe36DC1fE8Ef"')])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("event eventBurnBond(address _operator, address _from, uint256 class, uint256 nonce, uint256 _amount);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("code",[e._v('"eventTransferBond"')]),e._v(" MUST trigger when Bonds are transferred. This SHOULD not include zero value transfers. Transfer event with the "),s("code",[e._v("_from")]),e._v(" "),s("code",[e._v("0x0")]),e._v(" MUST not create this event(Use"),s("code",[e._v('"event issueBond"')]),e._v("instead ). Transfer event with the "),s("code",[e._v("_to")]),e._v(" "),s("code",[e._v("0x0")]),e._v(" MUST not create this event(Use"),s("code",[e._v('"event redeemBond"')]),e._v("when redemption, and "),s("code",[e._v('"event burnBond"')]),e._v("when burning).")]),e._v(" "),s("p",[e._v("e.g.")]),e._v(" "),s("p",[s("code",[e._v('"transfer by address(_operator) 500 SASH-USD Bond(Nonce14) from 0x2d03B6C79B75eE7aB35298878D05fe36DC1fE8Ef, to address(_to)"')])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("event eventTransferBond(address _operator, address _from, address _to, uint256 class, uint256 nonce, uint256 _amount);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h2",{attrs:{id:"backwards-compatibility"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#backwards-compatibility"}},[e._v("#")]),e._v(" Backwards Compatibility")]),e._v(" "),s("p",[e._v("ERC-659 contract is not compatible with contracts that don't have an ERC-659 interface built in. This requires the existing contract to upgrade with ERC-659 interface. The receiving of ERC-659 Bond need the implementation of ERC-659 interface in the receiver contract.")]),e._v(" "),s("p",[e._v("However any existing ERC-20 token contract can issue their ERC-659 bond, by giving the minting role to a bonk contract with ERC-659 interface built in. The implementation of This can be found in our Use Cases.")]),e._v(" "),s("p",[e._v("To ensure the reading of transactions, "),s("code",[e._v('"eventIssueBond"')]),e._v(" ,"),s("code",[e._v('"eventRedeemBond"')]),e._v(" ,"),s("code",[e._v('"eventBurnBond"')]),e._v(" ,"),s("code",[e._v('"eventTransferBond"')]),e._v(", Events cited above MUST be emitted when such transaction is passed.")]),e._v(" "),s("p",[s("em",[s("strong",[e._v("Note that the ERC-659 interface is also compatible with ERC-20 and ERC-721 interface .")])]),e._v(" But the creation of a separated bank contract is recommended for reading and future upgrade needs and .")]),e._v(" "),s("p",[e._v("The issuing of ERC-659 bonds is not limited to ERC-20 token. Standard like ERC-721 nonfungible token can also issue their bond with the help of ERC-659 interface.")]),e._v(" "),s("h2",{attrs:{id:"security-considerations"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#security-considerations"}},[e._v("#")]),e._v(" Security Considerations")]),e._v(" "),s("p",[e._v("There are no known security considerations for this EIP. More security considerations will be added after the authoring/feedback process of this EIP.")]),e._v(" "),s("h2",{attrs:{id:"copyright"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),s("p",[e._v("Copyright and related rights waived via "),s("a",{attrs:{href:"https://creativecommons.org/publicdomain/zero/1.0/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CC0"),s("OutboundLink")],1),e._v(".")])])}),[],!1,null,null,null);n.default=a.exports}}]);