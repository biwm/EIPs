(window.webpackJsonp=window.webpackJsonp||[]).push([[371],{774:function(e,t,i){"use strict";i.r(t);var o=i(46),a=Object(o.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h2",{attrs:{id:"abstract"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),i("p",[e._v("Two new EVM jump instructions are introduced ("),i("code",[e._v("RJUMP")]),e._v(" and "),i("code",[e._v("RJUMPI")]),e._v(") which encode the destination as a signed immediate value. These can be useful in the majority of (but not all) use cases and offer a cost reduction.")]),e._v(" "),i("h2",{attrs:{id:"motivation"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),i("p",[e._v("A recurring discussion topic is that EVM only has a mechanism for dynamic jumps. They provide a very flexible architecture with only 2 (!) instructions. This flexibility comes at a cost however: it makes analysis of code more complicated and it also (partially) resulted in the need to have the "),i("code",[e._v("JUMPDEST")]),e._v(" marker.")]),e._v(" "),i("p",[e._v("In a great many cases control flow is actually static and there is no need for any dynamic behaviour, though not every use case can be solved by static jumps.")]),e._v(" "),i("p",[e._v("There are various ways to reduce the need for dynamic jumps, some examples:")]),e._v(" "),i("ol",[i("li",[e._v("With native support for functions / subroutines")]),e._v(" "),i("li",[e._v('A "return to caller" instruction')]),e._v(" "),i("li",[e._v('A "switch-case" table with dynamic indexing')])]),e._v(" "),i("p",[e._v("This change does not attempt to solve these, but instead introduces a minimal feature set to allow compilers to decide which is the most adequate option for a given use case. It is expected that compilers will use "),i("code",[e._v("RJUMP")]),e._v("/"),i("code",[e._v("RJUMPI")]),e._v(" almost exclusively, with the exception of returning to the caller continuing to use "),i("code",[e._v("JUMP")]),e._v(".")]),e._v(" "),i("p",[e._v("This functionality does not preclude the EVM from introducing other forms of control flow later on. "),i("code",[e._v("RJUMP")]),e._v("/"),i("code",[e._v("RJUMPI")]),e._v(" can efficiently co-exists with a higher-level declaration of functions, where static relative jumps should be used for intra-function control flow.")]),e._v(" "),i("p",[e._v("The main benefit of these instruction is reduced gas cost (both at deploy and execution time) and better analysis properties.")]),e._v(" "),i("h2",{attrs:{id:"specification"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[e._v("#")]),e._v(" Specification")]),e._v(" "),i("p",[e._v("We introduce two new instructions on the same block number "),i("RouterLink",{attrs:{to:"/eip-3540.html"}},[e._v("EIP-3540")]),e._v(" is activated on:")],1),e._v(" "),i("ol",[i("li",[i("code",[e._v("RJUMP")]),e._v(" (0x5c)")]),e._v(" "),i("li",[i("code",[e._v("RJUMPI")]),e._v(" (0x5d)")])]),e._v(" "),i("p",[e._v("If the code is legacy bytecode, both of these instructions result in an "),i("em",[e._v("exceptional halt")]),e._v(". ("),i("em",[e._v("Note: This means no change to behaviour.")]),e._v(")")]),e._v(" "),i("p",[e._v("If the code is valid EOF1:")]),e._v(" "),i("ol",[i("li",[i("code",[e._v("RJUMP relative_offset")]),e._v(" (0x5c), sets the "),i("code",[e._v("PC")]),e._v(" to "),i("code",[e._v("PC_post_instruction + relative_offset")]),e._v(".")]),e._v(" "),i("li",[i("code",[e._v("RJUMPI relative_offset")]),e._v(" (0x5d), pops a value ("),i("code",[e._v("condition")]),e._v(") from the stack, and sets the "),i("code",[e._v("PC")]),e._v(" to "),i("code",[e._v("PC_post_instruction + ((condition == 0) ? 0 : relative_offset)")]),e._v(".")])]),e._v(" "),i("p",[e._v("The immediate argument "),i("code",[e._v("relative_offset")]),e._v(" is encoded as a 16-bit "),i("strong",[e._v("signed")]),e._v(" (two's-complement) big-endian value. Under "),i("code",[e._v("PC_post_instruction")]),e._v(" we mean the "),i("code",[e._v("PC")]),e._v(" position after the entire immediate value.")]),e._v(" "),i("p",[e._v("We also extend the validation algorithm of "),i("RouterLink",{attrs:{to:"/eip-3670.html"}},[e._v("EIP-3670")]),e._v(" to verify that each "),i("code",[e._v("RJUMP")]),e._v("/"),i("code",[e._v("RJUMPI")]),e._v(" has a "),i("code",[e._v("relative_offset")]),e._v(" pointing to an instruction. This means it cannot point to an immediate data of "),i("code",[e._v("PUSHn")]),e._v("/"),i("code",[e._v("RJUMP")]),e._v("/"),i("code",[e._v("RJUMPI")]),e._v(". It cannot point outside of code bounds. It is allowed to point to a "),i("code",[e._v("JUMPDEST")]),e._v(", but is not required to.")],1),e._v(" "),i("p",[e._v("Because the destinations are validated upfront, the cost of these instructions are less than their dynamic counterparts: "),i("code",[e._v("RJUMP")]),e._v(" should cost 5, and "),i("code",[e._v("RJUMPI")]),e._v(" should cost 7. This is a reduction of 2 gas, compared to "),i("code",[e._v("JUMP")]),e._v(" and "),i("code",[e._v("JUMPI")]),e._v(".")]),e._v(" "),i("h2",{attrs:{id:"rationale"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#rationale"}},[e._v("#")]),e._v(" Rationale")]),e._v(" "),i("h3",{attrs:{id:"relative-addressing"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#relative-addressing"}},[e._v("#")]),e._v(" Relative addressing")]),e._v(" "),i("p",[e._v("We chose relative addressing in order to support code which is moveable. This also means it can be injected. A technique seen used prior to this EIP to achieve this same goal was to inject code like "),i("code",[e._v("PUSHn PC ADD JUMPI")]),e._v(".")]),e._v(" "),i("p",[e._v("We do not see any significant downside to relative addressing, but it also allows the deprecation of the "),i("code",[e._v("PC")]),e._v(" instruction.")]),e._v(" "),i("p",[i("em",[e._v("Note: EIP-3670 should reject "),i("code",[e._v("PC")]),e._v(".")])]),e._v(" "),i("h3",{attrs:{id:"immediate-size"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#immediate-size"}},[e._v("#")]),e._v(" Immediate size")]),e._v(" "),i("p",[e._v("The signed 16-bit immediate means that the largest jump distance possible is 32767. In the case the bytecode at "),i("code",[e._v("PC=0")]),e._v(" starts with an "),i("code",[e._v("RJUMP")]),e._v(", it will be possible to jump as far as "),i("code",[e._v("PC=32770")]),e._v(".")]),e._v(" "),i("p",[e._v("Given "),i("code",[e._v("MAX_CODE_SIZE = 24576")]),e._v(" (in "),i("RouterLink",{attrs:{to:"/eip-170.html"}},[e._v("EIP-170")]),e._v(") and "),i("code",[e._v("MAX_INITCODE_SIZE = 49152")]),e._v(" (in "),i("RouterLink",{attrs:{to:"/eip-3860.html"}},[e._v("EIP-3860")]),e._v("), we think the 16-bit immediate is large enough.")],1),e._v(" "),i("p",[e._v("A version with an 8-bit immediate would only allow moving "),i("code",[e._v("PC")]),e._v(" backward by 125 or forward by 127 bytes. While that seems to be a good enough distance for many for-loops, it is likely not good enough for cross-function jumps, and since the 16-bit immediate is the same size as what a dynamic jump would take in such cases (3 bytes: "),i("code",[e._v("JUMP PUSH1 n")]),e._v("), we think having less instructions is better.")]),e._v(" "),i("p",[e._v("Should there be a need to have immediate encodings of other size (such as 8-bits, 24-bits or 32-bits), it would be possible to introduce new opcodes, similarly to how multiple "),i("code",[e._v("PUSH")]),e._v(" instructions exist.")]),e._v(" "),i("h3",{attrs:{id:"pushn-jump-sequences"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#pushn-jump-sequences"}},[e._v("#")]),e._v(" "),i("code",[e._v("PUSHn JUMP")]),e._v(" sequences")]),e._v(" "),i("p",[e._v("If we chose absolute addressing, then "),i("code",[e._v("RJUMP")]),e._v(" could be viewed similar to the sequence "),i("code",[e._v("PUSHn JUMP")]),e._v(" (and "),i("code",[e._v("RJUMPI")]),e._v(" similar to "),i("code",[e._v("PUSHn RJUMPI")]),e._v("). In that case one could argue that instead of introducing a new instruction, such sequences should get a discount, because EVMs could optimise them.")]),e._v(" "),i("p",[e._v("We think this is a bad direction to go:")]),e._v(" "),i("ol",[i("li",[e._v("It further complicates the already complex rules of gas calculation.")]),e._v(" "),i("li",[e._v("And it either requires a consensus defined internal representation for EVM code, or forces EVM implementations to do optimisations on their own.")])]),e._v(" "),i("p",[e._v("Both of these are risky. Furthermore we think that EVM implementations should be free to chose what optimisations they apply, and the savings do not need to be passed down at all cost.")]),e._v(" "),i("p",[e._v("Additionally it requires a potentially significant change to the current implementations which depend on a streaming one-by-one execution without a lookahead.")]),e._v(" "),i("h3",{attrs:{id:"relation-to-dynamic-jumps"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#relation-to-dynamic-jumps"}},[e._v("#")]),e._v(" Relation to dynamic jumps")]),e._v(" "),i("p",[e._v("The goal was not to completely replace the current control flow system of the EVM, but to augment it. There are many cases where dynamic jumps are useful, such as returning to the caller.")]),e._v(" "),i("p",[e._v('It is possible to introduce a new mechanism for having a pre-defined table of valid jump destinations, and dynamically supplying the index within this table to accomplish some form of dynamic jumps. This is very useful for efficiently encoding a form of "switch-cases" statements. It could also be used for "return to caller" cases, however it is likely inefficient or awkward.')]),e._v(" "),i("h3",{attrs:{id:"lack-of-jumpdest"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#lack-of-jumpdest"}},[e._v("#")]),e._v(" Lack of "),i("code",[e._v("JUMPDEST")])]),e._v(" "),i("p",[i("code",[e._v("JUMPDEST")]),e._v(" serves two purposes:")]),e._v(" "),i("ol",[i("li",[e._v("To efficiently partition code -- this can be useful for pre-calculating total gas usage for a given "),i("em",[e._v("block")]),e._v(" (i.e. instructions between "),i("code",[e._v("JUMPDEST")]),e._v("s), and for JIT/AOT translation.")]),e._v(" "),i("li",[e._v("To explicitly show valid locations (otherwise any non-data location would be valid).")])]),e._v(" "),i("p",[e._v("This functionality is not needed for static jumps, as the analysers can easily tell destinations from the static jump immediates during jumpdest-analysis.")]),e._v(" "),i("p",[e._v("There are two benefits here:")]),e._v(" "),i("ol",[i("li",[e._v("Not wasting a byte for a "),i("code",[e._v("JUMPDEST")]),e._v(" also means a saving of 200 gas during deployment, for each jump destination.")]),e._v(" "),i("li",[e._v("Saving an extra 1 gas per jump during execution, given "),i("code",[e._v("JUMPDEST")]),e._v(' itself cost 1 gas and is "executed" during jumping.')])]),e._v(" "),i("h2",{attrs:{id:"backwards-compatibility"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#backwards-compatibility"}},[e._v("#")]),e._v(" Backwards Compatibility")]),e._v(" "),i("p",[e._v("This change poses no risk to backwards compatibility, as it is introduced at the same time EIP-3540 is. The new instructions are not introduced for legacy bytecode (code which is not EOF formatted).")]),e._v(" "),i("h2",{attrs:{id:"security-considerations"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#security-considerations"}},[e._v("#")]),e._v(" Security Considerations")]),e._v(" "),i("p",[e._v("TBA")]),e._v(" "),i("h2",{attrs:{id:"copyright"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#copyright"}},[e._v("#")]),e._v(" Copyright")]),e._v(" "),i("p",[e._v("Copyright and related rights waived via "),i("a",{attrs:{href:"https://creativecommons.org/publicdomain/zero/1.0/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CC0"),i("OutboundLink")],1),e._v(".")])])}),[],!1,null,null,null);t.default=a.exports}}]);